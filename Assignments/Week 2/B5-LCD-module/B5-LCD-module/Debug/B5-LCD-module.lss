
B5-LCD-module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002cc  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000078  00000000  00000000  000002fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000109e  00000000  00000000  00000373  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000914  00000000  00000000  00001411  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000044b  00000000  00000000  00001d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ec  00000000  00000000  00002170  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002a6  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002bf  00000000  00000000  00002502  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000058  00000000  00000000  000027c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000254  00000254  000002c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000281c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_strobe_lcd_e 00000026  00000172  00000172  000001e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.init_4bits_mode 00000042  00000130  00000130  000001a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_write_char 00000024  00000198  00000198  0000020c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_write_command 00000024  000001bc  000001bc  00000230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_clear 0000001a  00000218  00000218  0000028c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_init 0000001c  000001e0  000001e0  00000254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_display_text 0000001a  00000232  00000232  000002a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LCD_set_cursor 00000008  0000024c  0000024c  000002c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data 0000001d  000000a4  000000a4  00000118  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .text.main    0000006e  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.libgcc  0000001c  000001fc  000001fc  00000270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
   8:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
   c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  10:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  14:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  18:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  1c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  20:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  24:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  28:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  2c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  30:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  34:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  38:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  3c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  40:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  44:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  48:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  4c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  50:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  54:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  58:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  5c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  60:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  64:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  68:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  6c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  70:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  74:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  78:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  7c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  80:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  84:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  88:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000254 <__bad_interrupt>:
 254:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_strobe_lcd_e:

00000172 <lcd_strobe_lcd_e>:
// Defining the ports the display is on
#define LCD_E 	6  // RA6 UNI-6
#define LCD_RS	4  // RA4 UNI-6

void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// E high
 172:	8b b3       	in	r24, 0x1b	; 27
 174:	80 64       	ori	r24, 0x40	; 64
 176:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	8f ec       	ldi	r24, 0xCF	; 207
 17a:	97 e0       	ldi	r25, 0x07	; 7
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <lcd_strobe_lcd_e+0xa>
 180:	00 c0       	rjmp	.+0      	; 0x182 <lcd_strobe_lcd_e+0x10>
 182:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTA &= ~(1<<LCD_E);  	// E low
 184:	8b b3       	in	r24, 0x1b	; 27
 186:	8f 7b       	andi	r24, 0xBF	; 191
 188:	8b bb       	out	0x1b, r24	; 27
 18a:	8f ec       	ldi	r24, 0xCF	; 207
 18c:	97 e0       	ldi	r25, 0x07	; 7
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_strobe_lcd_e+0x1c>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_strobe_lcd_e+0x22>
 194:	00 00       	nop
 196:	08 95       	ret

Disassembly of section .text.init_4bits_mode:

00000130 <init_4bits_mode>:
	_delay_ms(1);			// nodig?
}

void init_4bits_mode(void) {
 130:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRD = 0xFF;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
 136:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;
 138:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 13a:	1b ba       	out	0x1b, r1	; 27
	//PORTA = 0xFF;

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 13c:	c0 e2       	ldi	r28, 0x20	; 32
 13e:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 140:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
 144:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 146:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_strobe_lcd_e>
	PORTC = 0x80;
 14a:	80 e8       	ldi	r24, 0x80	; 128
 14c:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 14e:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 152:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 154:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_strobe_lcd_e>
	PORTC = 0xF0;
 158:	80 ef       	ldi	r24, 0xF0	; 240
 15a:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 15c:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 160:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 162:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_strobe_lcd_e>
	PORTC = 0x60;
 166:	80 e6       	ldi	r24, 0x60	; 96
 168:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 16a:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_strobe_lcd_e>
}
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

Disassembly of section .text.lcd_write_char:

00000198 <lcd_write_char>:

void lcd_write_char(unsigned char byte) {
 198:	cf 93       	push	r28
 19a:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 19c:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 19e:	8b b3       	in	r24, 0x1b	; 27
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 1a4:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 1a8:	c2 95       	swap	r28
 1aa:	c0 7f       	andi	r28, 0xF0	; 240
 1ac:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 1ae:	8b b3       	in	r24, 0x1b	; 27
 1b0:	80 61       	ori	r24, 0x10	; 16
 1b2:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 1b4:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_strobe_lcd_e>
}
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

Disassembly of section .text.lcd_write_command:

000001bc <lcd_write_command>:

void lcd_write_command(unsigned char byte) {
 1bc:	cf 93       	push	r28
 1be:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 1c0:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 1c2:	8b b3       	in	r24, 0x1b	; 27
 1c4:	8f 7e       	andi	r24, 0xEF	; 239
 1c6:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 1c8:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 1cc:	c2 95       	swap	r28
 1ce:	c0 7f       	andi	r28, 0xF0	; 240
 1d0:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 1d2:	8b b3       	in	r24, 0x1b	; 27
 1d4:	8f 7e       	andi	r24, 0xEF	; 239
 1d6:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 1d8:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_strobe_lcd_e>
}
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

Disassembly of section .text.lcd_clear:

00000218 <lcd_clear>:

void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_write_command>
 21e:	8f e9       	ldi	r24, 0x9F	; 159
 220:	9f e0       	ldi	r25, 0x0F	; 15
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <lcd_clear+0xa>
 226:	00 c0       	rjmp	.+0      	; 0x228 <lcd_clear+0x10>
 228:	00 00       	nop
	_delay_ms(2);
	lcd_write_command (0x80);
 22a:	80 e8       	ldi	r24, 0x80	; 128
 22c:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_write_command>
 230:	08 95       	ret

Disassembly of section .text.LCD_init:

000001e0 <LCD_init>:


void LCD_init() 
{
		// Setting DDRC to output, these are used in writing data to the LCD
		DDRC = 0xFF;			
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	84 bb       	out	0x14, r24	; 20
		PORTC = 0xFF;
 1e4:	85 bb       	out	0x15, r24	; 21
		
		// Setting the LCD to use the 4 bit mode
		init_4bits_mode();
 1e6:	0e 94 98 00 	call	0x130	; 0x130 <init_4bits_mode>
 1ea:	8f e1       	ldi	r24, 0x1F	; 31
 1ec:	9e e4       	ldi	r25, 0x4E	; 78
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_init+0xe>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_init+0x14>
 1f4:	00 00       	nop
		
		// Wait a bit to complete the init
		_delay_ms(10);
		
		// Clearing the LCD
		lcd_clear();
 1f6:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_clear>
 1fa:	08 95       	ret

Disassembly of section .text.LCD_display_text:

00000232 <LCD_display_text>:
}

void LCD_display_text(char *str)
{
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	ec 01       	movw	r28, r24
	while (*str) {
 238:	03 c0       	rjmp	.+6      	; 0x240 <LCD_display_text+0xe>
		lcd_write_char(*str++);
 23a:	21 96       	adiw	r28, 0x01	; 1
 23c:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_write_char>
		lcd_clear();
}

void LCD_display_text(char *str)
{
	while (*str) {
 240:	88 81       	ld	r24, Y
 242:	81 11       	cpse	r24, r1
 244:	fa cf       	rjmp	.-12     	; 0x23a <LCD_display_text+0x8>
		lcd_write_char(*str++);
	}
}
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

Disassembly of section .text.LCD_set_cursor:

0000024c <LCD_set_cursor>:

void LCD_set_cursor(int position)
{
	// Bit 8 should be 1 to change cursor
	char command = (position | (1<<7));
	lcd_write_command(command);
 24c:	80 68       	ori	r24, 0x80	; 128
 24e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_write_command>
 252:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "LCD.h"
#include "delay.h"

int main() {
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	6d 97       	sbiw	r28, 0x1d	; 29
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	f8 94       	cli
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	cd bf       	out	0x3d, r28	; 61
	
	LCD_init();
  d6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_init>
	
	// test text
	char string[] = "test 123 twan";
  da:	24 ea       	ldi	r18, 0xA4	; 164
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	8e e0       	ldi	r24, 0x0E	; 14
  e2:	f9 01       	movw	r30, r18
  e4:	de 01       	movw	r26, r28
  e6:	11 96       	adiw	r26, 0x01	; 1
  e8:	74 2f       	mov	r23, r20
  ea:	0e 94 fe 00 	call	0x1fc	; 0x1fc <__movmemx_qi>
	LCD_display_text(string);
  ee:	ce 01       	movw	r24, r28
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	0e 94 19 01 	call	0x232	; 0x232 <LCD_display_text>
	
	LCD_set_cursor(40);
  f6:	88 e2       	ldi	r24, 0x28	; 40
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_set_cursor>
	
	// test text
	char string2[] = "jesse 123 test";
  fe:	22 eb       	ldi	r18, 0xB2	; 178
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	8f e0       	ldi	r24, 0x0F	; 15
 106:	f9 01       	movw	r30, r18
 108:	de 01       	movw	r26, r28
 10a:	1f 96       	adiw	r26, 0x0f	; 15
 10c:	74 2f       	mov	r23, r20
 10e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <__movmemx_qi>
	LCD_display_text(string2);
 112:	ce 01       	movw	r24, r28
 114:	0f 96       	adiw	r24, 0x0f	; 15
 116:	0e 94 19 01 	call	0x232	; 0x232 <LCD_display_text>
	
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	6d 96       	adiw	r28, 0x1d	; 29
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

Disassembly of section .text.libgcc:

000001fc <__movmemx_qi>:
 1fc:	99 27       	eor	r25, r25

000001fe <__movmemx_hi>:
 1fe:	77 fd       	sbrc	r23, 7
 200:	06 c0       	rjmp	.+12     	; 0x20e <__movmemx_hi+0x10>
 202:	7b bf       	out	0x3b, r23	; 59
 204:	07 90       	elpm	r0, Z+
 206:	0d 92       	st	X+, r0
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	e1 f7       	brne	.-8      	; 0x204 <__movmemx_hi+0x6>
 20c:	08 95       	ret
 20e:	01 90       	ld	r0, Z+
 210:	0d 92       	st	X+, r0
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	e1 f7       	brne	.-8      	; 0x20e <__movmemx_hi+0x10>
 216:	08 95       	ret
