
B5-LCD-module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f0  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000078  00000000  00000000  0000031f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000118a  00000000  00000000  00000397  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000989  00000000  00000000  00001521  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004ec  00000000  00000000  00001eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ec  00000000  00000000  00002398  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002a6  00000000  00000000  00002484  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000034d  00000000  00000000  0000272a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000058  00000000  00000000  00002a77  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000278  00000278  000002ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_strobe_lcd_e 00000026  00000196  00000196  0000020a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.init_4bits_mode 00000042  00000154  00000154  000001c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_write_char 00000024  000001bc  000001bc  00000230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_write_command 00000024  000001e0  000001e0  00000254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_clear 0000001a  0000023c  0000023c  000002b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_init 0000001c  00000204  00000204  00000278  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_display_text 0000001a  00000256  00000256  000002ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LCD_set_cursor 00000008  00000270  00000270  000002e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data 0000001d  000000a4  000000a4  00000118  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .text.main    00000092  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.libgcc  0000001c  00000220  00000220  00000294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
   8:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
   c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  10:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  14:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  18:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  1c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  20:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  24:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  28:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  2c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  30:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  34:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  38:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  3c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  40:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  44:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  48:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  4c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  50:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  54:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  58:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  5c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  60:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  64:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  68:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  6c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  70:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  74:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  78:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  7c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  80:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  84:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  88:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000278 <__bad_interrupt>:
 278:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_strobe_lcd_e:

00000196 <lcd_strobe_lcd_e>:
#define LCD_E 	6  // RA6 UNI-6
#define LCD_RS	4  // RA4 UNI-6

// Locks in a set position by setting E high and low
void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// set E high
 196:	8b b3       	in	r24, 0x1b	; 27
 198:	80 64       	ori	r24, 0x40	; 64
 19a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	89 ef       	ldi	r24, 0xF9	; 249
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_strobe_lcd_e+0xa>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_strobe_lcd_e+0x10>
 1a6:	00 00       	nop
	_delay_ms(1);			// Small delay to process
	PORTA &= ~(1<<LCD_E);  	// set E low
 1a8:	8b b3       	in	r24, 0x1b	; 27
 1aa:	8f 7b       	andi	r24, 0xBF	; 191
 1ac:	8b bb       	out	0x1b, r24	; 27
 1ae:	89 ef       	ldi	r24, 0xF9	; 249
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_strobe_lcd_e+0x1c>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_strobe_lcd_e+0x22>
 1b8:	00 00       	nop
 1ba:	08 95       	ret

Disassembly of section .text.init_4bits_mode:

00000154 <init_4bits_mode>:
}

/*
 * Sets the lcd display to the correct 4 pin mode.
 */
void init_4bits_mode(void) {
 154:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRD = 0xFF;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
 15a:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;
 15c:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 15e:	1b ba       	out	0x1b, r1	; 27
	//PORTA = 0xFF;

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 160:	c0 e2       	ldi	r28, 0x20	; 32
 162:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 164:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
 168:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 16a:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_strobe_lcd_e>
	PORTC = 0x80;
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 172:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 176:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 178:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_strobe_lcd_e>
	PORTC = 0xF0;
 17c:	80 ef       	ldi	r24, 0xF0	; 240
 17e:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 180:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 184:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 186:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_strobe_lcd_e>
	PORTC = 0x60;
 18a:	80 e6       	ldi	r24, 0x60	; 96
 18c:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 18e:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_strobe_lcd_e>
}
 192:	cf 91       	pop	r28
 194:	08 95       	ret

Disassembly of section .text.lcd_write_char:

000001bc <lcd_write_char>:

// Writes a command to the LCD display
// This by setting RS high
void lcd_write_char(unsigned char byte) {
 1bc:	cf 93       	push	r28
 1be:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 1c0:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 1c2:	8b b3       	in	r24, 0x1b	; 27
 1c4:	80 61       	ori	r24, 0x10	; 16
 1c6:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 1c8:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 1cc:	c2 95       	swap	r28
 1ce:	c0 7f       	andi	r28, 0xF0	; 240
 1d0:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 1d2:	8b b3       	in	r24, 0x1b	; 27
 1d4:	80 61       	ori	r24, 0x10	; 16
 1d6:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 1d8:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_strobe_lcd_e>
}
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

Disassembly of section .text.lcd_write_command:

000001e0 <lcd_write_command>:


// Writes a command to the LCD display
// This by setting RS low
void lcd_write_command(unsigned char byte) {
 1e0:	cf 93       	push	r28
 1e2:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 1e4:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 1e6:	8b b3       	in	r24, 0x1b	; 27
 1e8:	8f 7e       	andi	r24, 0xEF	; 239
 1ea:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 1ec:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 1f0:	c2 95       	swap	r28
 1f2:	c0 7f       	andi	r28, 0xF0	; 240
 1f4:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 1f6:	8b b3       	in	r24, 0x1b	; 27
 1f8:	8f 7e       	andi	r24, 0xEF	; 239
 1fa:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 1fc:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_strobe_lcd_e>
}
 200:	cf 91       	pop	r28
 202:	08 95       	ret

Disassembly of section .text.lcd_clear:

0000023c <lcd_clear>:

void lcd_clear() {
	lcd_write_command (0x01); // 0x01 clear the entire display
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_write_command>
 242:	83 ef       	ldi	r24, 0xF3	; 243
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <lcd_clear+0xa>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <lcd_clear+0x10>
 24c:	00 00       	nop
	_delay_ms(2);			  // small delay
	lcd_write_command (0x80); // 0x80 moves the cursor to the start
 24e:	80 e8       	ldi	r24, 0x80	; 128
 250:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_write_command>
 254:	08 95       	ret

Disassembly of section .text.LCD_init:

00000204 <LCD_init>:
*/
void LCD_init() 
{

		// Setting DDRC to output, these are used in writing data to the LCD
		DDRC = 0xFF;			
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	84 bb       	out	0x14, r24	; 20
		PORTC = 0xFF;
 208:	85 bb       	out	0x15, r24	; 21
		
		// Setting the LCD to use the 4 bit mode
		init_4bits_mode();
 20a:	0e 94 aa 00 	call	0x154	; 0x154 <init_4bits_mode>
 20e:	83 ec       	ldi	r24, 0xC3	; 195
 210:	99 e0       	ldi	r25, 0x09	; 9
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <LCD_init+0xe>
 216:	00 c0       	rjmp	.+0      	; 0x218 <LCD_init+0x14>
 218:	00 00       	nop
		
		// Wait a bit to complete the init
		_delay_ms(10);
		
		// Clearing the LCD
		lcd_clear();
 21a:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_clear>
 21e:	08 95       	ret

Disassembly of section .text.LCD_display_text:

00000256 <LCD_display_text>:
/*
* Given a string pointer (char array) this method will
* print that text to the display of the LCD
*/
void LCD_display_text(char *str)
{
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	ec 01       	movw	r28, r24
	// Going until the value in the string pointer is 0
	while (*str) {
 25c:	03 c0       	rjmp	.+6      	; 0x264 <LCD_display_text+0xe>
		// Moving the string pointer by one up
		lcd_write_char(*str++);
 25e:	21 96       	adiw	r28, 0x01	; 1
 260:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_write_char>
* print that text to the display of the LCD
*/
void LCD_display_text(char *str)
{
	// Going until the value in the string pointer is 0
	while (*str) {
 264:	88 81       	ld	r24, Y
 266:	81 11       	cpse	r24, r1
 268:	fa cf       	rjmp	.-12     	; 0x25e <LCD_display_text+0x8>
		// Moving the string pointer by one up
		lcd_write_char(*str++);
	}
}
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

Disassembly of section .text.LCD_set_cursor:

00000270 <LCD_set_cursor>:
*/
void LCD_set_cursor(int position)
{
	// Bit 8 should be 1 to change cursor
	char command = (position | (1<<7));
	lcd_write_command(command);
 270:	80 68       	ori	r24, 0x80	; 128
 272:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_write_command>
 276:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:
#include <avr/interrupt.h>
#include <util/delay.h>


// Main method to test the display module
int main() {
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	6d 97       	sbiw	r28, 0x1d	; 29
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	f8 94       	cli
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	cd bf       	out	0x3d, r28	; 61
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	84 e3       	ldi	r24, 0x34	; 52
  da:	9c e0       	ldi	r25, 0x0C	; 12
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x1a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x24>
  e6:	00 00       	nop
		
	_delay_ms(500);	
		
	// Starting up the LCD display
	LCD_init();
  e8:	0e 94 02 01 	call	0x204	; 0x204 <LCD_init>
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	8e e9       	ldi	r24, 0x9E	; 158
  f0:	94 e2       	ldi	r25, 0x24	; 36
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x30>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x3a>
  fc:	00 00       	nop
	
	_delay_ms(1500);
	
	// Writing a test string to the first line
	char string[] = "test 123 Twan";
  fe:	24 ea       	ldi	r18, 0xA4	; 164
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	8e e0       	ldi	r24, 0x0E	; 14
 106:	f9 01       	movw	r30, r18
 108:	de 01       	movw	r26, r28
 10a:	11 96       	adiw	r26, 0x01	; 1
 10c:	74 2f       	mov	r23, r20
 10e:	0e 94 10 01 	call	0x220	; 0x220 <__movmemx_qi>
	LCD_display_text(string);
 112:	ce 01       	movw	r24, r28
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_display_text>
	
	// Moving the cursor to position 40 (line 2)
	LCD_set_cursor(40);
 11a:	88 e2       	ldi	r24, 0x28	; 40
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 38 01 	call	0x270	; 0x270 <LCD_set_cursor>
	
	// Writing a test string to the second line
	char string2[] = "Jesse 123 test";
 122:	22 eb       	ldi	r18, 0xB2	; 178
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	8f e0       	ldi	r24, 0x0F	; 15
 12a:	f9 01       	movw	r30, r18
 12c:	de 01       	movw	r26, r28
 12e:	1f 96       	adiw	r26, 0x0f	; 15
 130:	74 2f       	mov	r23, r20
 132:	0e 94 10 01 	call	0x220	; 0x220 <__movmemx_qi>
	LCD_display_text(string2);
 136:	ce 01       	movw	r24, r28
 138:	0f 96       	adiw	r24, 0x0f	; 15
 13a:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_display_text>
	
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	6d 96       	adiw	r28, 0x1d	; 29
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	de bf       	out	0x3e, r29	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	cd bf       	out	0x3d, r28	; 61
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

Disassembly of section .text.libgcc:

00000220 <__movmemx_qi>:
 220:	99 27       	eor	r25, r25

00000222 <__movmemx_hi>:
 222:	77 fd       	sbrc	r23, 7
 224:	06 c0       	rjmp	.+12     	; 0x232 <__movmemx_hi+0x10>
 226:	7b bf       	out	0x3b, r23	; 59
 228:	07 90       	elpm	r0, Z+
 22a:	0d 92       	st	X+, r0
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	e1 f7       	brne	.-8      	; 0x228 <__movmemx_hi+0x6>
 230:	08 95       	ret
 232:	01 90       	ld	r0, Z+
 234:	0d 92       	st	X+, r0
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	e1 f7       	brne	.-8      	; 0x232 <__movmemx_hi+0x10>
 23a:	08 95       	ret
