
B4-7Segment-Pattern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001b5  00000229  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000229  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c2a  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000862  00000000  00000000  00000eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002bf  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000058  00000000  00000000  000019d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000db  00000000  00000000  00001ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00001d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000162  00000162  000001d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  00000144  00000144  000001b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.display 00000004  00000166  00000166  000001da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000058  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .data.instructions 0000004b  00800100  0000016a  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
   8:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
   c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  10:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  14:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  18:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  1c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  20:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  24:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  28:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  2c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  30:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  34:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  38:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  3c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  40:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  44:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  48:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  4c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  50:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  54:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  58:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  5c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  60:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  64:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  68:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  6c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  70:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  74:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  78:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  7c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  80:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  84:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  88:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 4b       	sbci	r16, 0xB1	; 177
  90:	00 01       	movw	r0, r0
  92:	6a 00       	.word	0x006a	; ????

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	ec e8       	ldi	r30, 0x8C	; 140
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	19 c0       	rjmp	.+50     	; 0xda <__do_clear_bss+0x8>
  a8:	b7 91       	elpm	r27, Z+
  aa:	a7 91       	elpm	r26, Z+
  ac:	37 91       	elpm	r19, Z+
  ae:	27 91       	elpm	r18, Z+
  b0:	07 91       	elpm	r16, Z+
  b2:	07 fd       	sbrc	r16, 7
  b4:	0e c0       	rjmp	.+28     	; 0xd2 <__do_clear_bss>
  b6:	97 91       	elpm	r25, Z+
  b8:	87 91       	elpm	r24, Z+
  ba:	ef 01       	movw	r28, r30
  bc:	f9 2f       	mov	r31, r25
  be:	e8 2f       	mov	r30, r24
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	07 90       	elpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	a2 17       	cp	r26, r18
  c8:	b3 07       	cpc	r27, r19
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0x22>
  cc:	fe 01       	movw	r30, r28
  ce:	1b be       	out	0x3b, r1	; 59
  d0:	04 c0       	rjmp	.+8      	; 0xda <__do_clear_bss+0x8>

000000d2 <__do_clear_bss>:
  d2:	1d 92       	st	X+, r1
  d4:	a2 17       	cp	r26, r18
  d6:	b3 07       	cpc	r27, r19
  d8:	e1 f7       	brne	.-8      	; 0xd2 <__do_clear_bss>
  da:	e3 39       	cpi	r30, 0x93	; 147
  dc:	f4 07       	cpc	r31, r20
  de:	21 f7       	brne	.-56     	; 0xa8 <__do_copy_data+0x8>
  e0:	0e 94 76 00 	call	0xec	; 0xec <_etext>
  e4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>

Disassembly of section .text:

00000162 <__bad_interrupt>:
 162:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

00000144 <wait>:
};

void wait( int ms )
{
	// Make the processor delay for 1 ms looped for the given ms
	for (int i=0; i<ms; i++) {
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	08 c0       	rjmp	.+16     	; 0x15a <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	ef ec       	ldi	r30, 0xCF	; 207
 14c:	f7 e0       	ldi	r31, 0x07	; 7
 14e:	31 97       	sbiw	r30, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <wait+0xa>
 152:	00 c0       	rjmp	.+0      	; 0x154 <wait+0x10>
 154:	00 00       	nop
 156:	2f 5f       	subi	r18, 0xFF	; 255
 158:	3f 4f       	sbci	r19, 0xFF	; 255
 15a:	28 17       	cp	r18, r24
 15c:	39 07       	cpc	r19, r25
 15e:	ac f3       	brlt	.-22     	; 0x14a <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 160:	08 95       	ret

Disassembly of section .text.display:

00000166 <display>:

void display(PATTERN_INSTRUCTIONS instruction){
	PORTA = instruction.value;
 166:	6b bb       	out	0x1b, r22	; 27
 168:	08 95       	ret

Disassembly of section .text.main:

000000ec <main>:
};

int main(void)
{
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
	DDRA = 0xFF;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	8a bb       	out	0x1a, r24	; 26
    int index = 0;
	
    while( instructions[index].delay != 0 ) {
  f8:	18 c0       	rjmp	.+48     	; 0x12a <main+0x3e>
	    for (int i = 0; i < INSTRUCTION_SIZE; i++)
	    {
		    display(instructions[i]);
  fa:	e8 01       	movw	r28, r16
  fc:	cc 0f       	add	r28, r28
  fe:	dd 1f       	adc	r29, r29
 100:	c0 0f       	add	r28, r16
 102:	d1 1f       	adc	r29, r17
 104:	c0 50       	subi	r28, 0x00	; 0
 106:	df 4f       	sbci	r29, 0xFF	; 255
 108:	68 81       	ld	r22, Y
 10a:	79 81       	ldd	r23, Y+1	; 0x01
 10c:	8a 81       	ldd	r24, Y+2	; 0x02
 10e:	0e 94 b3 00 	call	0x166	; 0x166 <display>
		    wait(instructions[i].delay);
 112:	89 81       	ldd	r24, Y+1	; 0x01
 114:	9a 81       	ldd	r25, Y+2	; 0x02
 116:	0e 94 a2 00 	call	0x144	; 0x144 <wait>
{
	DDRA = 0xFF;
    int index = 0;
	
    while( instructions[index].delay != 0 ) {
	    for (int i = 0; i < INSTRUCTION_SIZE; i++)
 11a:	0f 5f       	subi	r16, 0xFF	; 255
 11c:	1f 4f       	sbci	r17, 0xFF	; 255
 11e:	02 c0       	rjmp	.+4      	; 0x124 <main+0x38>
 120:	00 e0       	ldi	r16, 0x00	; 0
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	09 31       	cpi	r16, 0x19	; 25
 126:	11 05       	cpc	r17, r1
 128:	44 f3       	brlt	.-48     	; 0xfa <main+0xe>
int main(void)
{
	DDRA = 0xFF;
    int index = 0;
	
    while( instructions[index].delay != 0 ) {
 12a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 132:	89 2b       	or	r24, r25
 134:	a9 f7       	brne	.-22     	; 0x120 <main+0x34>
	    {
		    display(instructions[i]);
		    wait(instructions[i].delay);
	    }
    }
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	1f 91       	pop	r17
 140:	0f 91       	pop	r16
 142:	08 95       	ret
