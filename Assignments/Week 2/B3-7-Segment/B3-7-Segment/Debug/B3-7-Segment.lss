
B3-7-Segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000184  000001f8  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  00000227  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c7c  00000000  00000000  0000025f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000871  00000000  00000000  00000edb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000322  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00001a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000146  00000000  00000000  00001d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001e93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000170  00000170  000001e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  00000138  00000138  000001ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.display 0000001a  00000156  00000156  000001ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000004c  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .data.letterCodes 00000010  00800100  00000174  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
   8:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
   c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  10:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  14:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  18:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  1c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  24:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  28:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  2c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  30:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  34:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  38:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  3c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  40:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  44:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  48:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  4c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  50:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  54:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  58:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  5c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  60:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  64:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  68:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  6c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  70:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  74:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  78:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  7c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  80:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  84:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  88:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 10       	cpse	r0, r1
  90:	00 01       	movw	r0, r0
  92:	74 00       	.word	0x0074	; ????

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	ec e8       	ldi	r30, 0x8C	; 140
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	19 c0       	rjmp	.+50     	; 0xda <__do_clear_bss+0x8>
  a8:	b7 91       	elpm	r27, Z+
  aa:	a7 91       	elpm	r26, Z+
  ac:	37 91       	elpm	r19, Z+
  ae:	27 91       	elpm	r18, Z+
  b0:	07 91       	elpm	r16, Z+
  b2:	07 fd       	sbrc	r16, 7
  b4:	0e c0       	rjmp	.+28     	; 0xd2 <__do_clear_bss>
  b6:	97 91       	elpm	r25, Z+
  b8:	87 91       	elpm	r24, Z+
  ba:	ef 01       	movw	r28, r30
  bc:	f9 2f       	mov	r31, r25
  be:	e8 2f       	mov	r30, r24
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	07 90       	elpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	a2 17       	cp	r26, r18
  c8:	b3 07       	cpc	r27, r19
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0x22>
  cc:	fe 01       	movw	r30, r28
  ce:	1b be       	out	0x3b, r1	; 59
  d0:	04 c0       	rjmp	.+8      	; 0xda <__do_clear_bss+0x8>

000000d2 <__do_clear_bss>:
  d2:	1d 92       	st	X+, r1
  d4:	a2 17       	cp	r26, r18
  d6:	b3 07       	cpc	r27, r19
  d8:	e1 f7       	brne	.-8      	; 0xd2 <__do_clear_bss>
  da:	e3 39       	cpi	r30, 0x93	; 147
  dc:	f4 07       	cpc	r31, r20
  de:	21 f7       	brne	.-56     	; 0xa8 <__do_copy_data+0x8>
  e0:	0e 94 76 00 	call	0xec	; 0xec <_etext>
  e4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>

Disassembly of section .text:

00000170 <__bad_interrupt>:
 170:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

00000138 <wait>:
	0x3B,
	0x39
};

void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	08 c0       	rjmp	.+16     	; 0x14e <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	ef ec       	ldi	r30, 0xCF	; 207
 140:	f7 e0       	ldi	r31, 0x07	; 7
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <wait+0xa>
 146:	00 c0       	rjmp	.+0      	; 0x148 <wait+0x10>
 148:	00 00       	nop
 14a:	2f 5f       	subi	r18, 0xFF	; 255
 14c:	3f 4f       	sbci	r19, 0xFF	; 255
 14e:	28 17       	cp	r18, r24
 150:	39 07       	cpc	r19, r25
 152:	ac f3       	brlt	.-22     	; 0x13e <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
};
 154:	08 95       	ret

Disassembly of section .text.display:

00000156 <display>:

void display(int digit){
	if (digit < 0 || digit > 15)
 156:	80 31       	cpi	r24, 0x10	; 16
 158:	91 05       	cpc	r25, r1
 15a:	20 f0       	brcs	.+8      	; 0x164 <display+0xe>
	{
		PORTA = letterCodes[14];
 15c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
 160:	8b bb       	out	0x1b, r24	; 27
 162:	08 95       	ret
	} else {
		PORTA = letterCodes[digit];
 164:	fc 01       	movw	r30, r24
 166:	e0 50       	subi	r30, 0x00	; 0
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	80 81       	ld	r24, Z
 16c:	8b bb       	out	0x1b, r24	; 27
 16e:	08 95       	ret

Disassembly of section .text.main:

000000ec <main>:
	}
};

int main(void)
{
	DDRA = 0xFF;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	8a bb       	out	0x1a, r24	; 26
	
	int digit = 0;
	
	display(digit);
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 ab 00 	call	0x156	; 0x156 <display>

int main(void)
{
	DDRA = 0xFF;
	
	int digit = 0;
  f8:	c0 e0       	ldi	r28, 0x00	; 0
  fa:	d0 e0       	ldi	r29, 0x00	; 0
	
	display(digit);
	
    while(1)
    {
        if (PINC == 0b00000001)
  fc:	83 b3       	in	r24, 0x13	; 19
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	29 f4       	brne	.+10     	; 0x10c <main+0x20>
        {
			digit++;
 102:	21 96       	adiw	r28, 0x01	; 1
			display(digit);
 104:	ce 01       	movw	r24, r28
 106:	0e 94 ab 00 	call	0x156	; 0x156 <display>
 10a:	11 c0       	rjmp	.+34     	; 0x12e <main+0x42>
        } else if (PINC == 0b00000010)
 10c:	83 b3       	in	r24, 0x13	; 19
 10e:	82 30       	cpi	r24, 0x02	; 2
 110:	29 f4       	brne	.+10     	; 0x11c <main+0x30>
        {
			digit--;
 112:	21 97       	sbiw	r28, 0x01	; 1
			display(digit);
 114:	ce 01       	movw	r24, r28
 116:	0e 94 ab 00 	call	0x156	; 0x156 <display>
 11a:	09 c0       	rjmp	.+18     	; 0x12e <main+0x42>
        } else if (PINC == 0b00000011) {
 11c:	83 b3       	in	r24, 0x13	; 19
 11e:	83 30       	cpi	r24, 0x03	; 3
 120:	31 f4       	brne	.+12     	; 0x12e <main+0x42>
			digit = 0;
			display(digit);
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 ab 00 	call	0x156	; 0x156 <display>
        } else if (PINC == 0b00000010)
        {
			digit--;
			display(digit);
        } else if (PINC == 0b00000011) {
			digit = 0;
 12a:	c0 e0       	ldi	r28, 0x00	; 0
 12c:	d0 e0       	ldi	r29, 0x00	; 0
			display(digit);
		}
		
		wait(250);
 12e:	8a ef       	ldi	r24, 0xFA	; 250
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 9c 00 	call	0x138	; 0x138 <wait>
    }
 136:	e2 cf       	rjmp	.-60     	; 0xfc <main+0x10>
