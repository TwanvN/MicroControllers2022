
B3-ADC 8 bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000134  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000163  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000aff  00000000  00000000  0000018b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000007f5  00000000  00000000  00000c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000279  00000000  00000000  0000147f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  000016f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  000019a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .text         00000004  000000dc  000000dc  00000130  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .text.adcInit 0000000a  000000d2  000000d2  00000126  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text.main    0000002e  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  68:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  6c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  70:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  74:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  78:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  7c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  80:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  84:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  88:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.adcInit:

000000d2 <adcInit>:

#include <xc.h>
#include <util/delay.h>

void adcInit() {
	ADMUX = 0b01100011;  // Standard (5) V, on port F3
  d2:	83 e6       	ldi	r24, 0x63	; 99
  d4:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA = 0b10000110; // ADC-enable, no interrupt, no free running, division by 64
  d6:	86 e8       	ldi	r24, 0x86	; 134
  d8:	86 b9       	out	0x06, r24	; 6
  da:	08 95       	ret

Disassembly of section .text.main:

000000a4 <main>:
}

int main(void)
{
	DDRA = 0xFF;	// DDRA to output
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	8a bb       	out	0x1a, r24	; 26
	DDRF = 0x00;	// DDRF to input
  a8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
	adcInit();	// Init the ADC
  ac:	0e 94 69 00 	call	0xd2	; 0xd2 <adcInit>
	
    while(1)
    {
		ADCSRA |= (1<<6);				// Start ADC
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	86 b9       	out	0x06, r24	; 6
		while ( ADCSRA & (1<<6)) ;		// Wait for completion
  b6:	36 99       	sbic	0x06, 6	; 6
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <main+0x12>
		PORTA = ADCH;					// Setting the most significant bits to PORTA
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	80 e7       	ldi	r24, 0x70	; 112
  c2:	92 e0       	ldi	r25, 0x02	; 2
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x20>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x2a>
  ce:	00 00       	nop
  d0:	ef cf       	rjmp	.-34     	; 0xb0 <main+0xc>
