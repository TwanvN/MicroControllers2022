
Guitar_Hero.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000224  000002b8  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  000002e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000e6e  00000000  00000000  0000033f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000845  00000000  00000000  000011ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000321  00000000  00000000  000019f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00001d14  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000297  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000cb  00000000  00000000  0000206b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00002136  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001ee  000001ee  00000282  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002170  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.__vector_15 00000070  000000f0  000000f0  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.initTimer 00000012  000001dc  000001dc  00000270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000001a  000001ae  000001ae  00000242  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.timerOverflow 00000002  00800132  00800132  000002b8  2**0
                  ALLOC
 17 .text.updateLight 00000014  000001c8  000001c8  0000025c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.playFirstSong 0000004e  00000160  00000160  000001f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss.currentLight 00000002  00800134  00800134  000002b8  2**0
                  ALLOC
 20 .data.firstSong 00000032  00800100  000001f2  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
   8:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
   c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  10:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  14:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  18:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  1c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  20:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  24:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  28:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  2c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  30:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  34:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  38:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  3c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_etext>
  40:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  44:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  48:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  4c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  50:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  54:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  58:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  5c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  60:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  64:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  68:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  6c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  70:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  74:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  78:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  7c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  80:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  84:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  88:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 32       	cpi	r16, 0x21	; 33
  90:	00 01       	movw	r0, r0
  92:	f2 01       	movw	r30, r4
  94:	32 01       	movw	r6, r4
  96:	36 80       	ldd	r3, Z+6	; 0x06

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	ec e8       	ldi	r30, 0x8C	; 140
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	19 c0       	rjmp	.+50     	; 0xde <__do_clear_bss+0x8>
  ac:	b7 91       	elpm	r27, Z+
  ae:	a7 91       	elpm	r26, Z+
  b0:	37 91       	elpm	r19, Z+
  b2:	27 91       	elpm	r18, Z+
  b4:	07 91       	elpm	r16, Z+
  b6:	07 fd       	sbrc	r16, 7
  b8:	0e c0       	rjmp	.+28     	; 0xd6 <__do_clear_bss>
  ba:	97 91       	elpm	r25, Z+
  bc:	87 91       	elpm	r24, Z+
  be:	ef 01       	movw	r28, r30
  c0:	f9 2f       	mov	r31, r25
  c2:	e8 2f       	mov	r30, r24
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	07 90       	elpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	a2 17       	cp	r26, r18
  cc:	b3 07       	cpc	r27, r19
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x22>
  d0:	fe 01       	movw	r30, r28
  d2:	1b be       	out	0x3b, r1	; 59
  d4:	04 c0       	rjmp	.+8      	; 0xde <__do_clear_bss+0x8>

000000d6 <__do_clear_bss>:
  d6:	1d 92       	st	X+, r1
  d8:	a2 17       	cp	r26, r18
  da:	b3 07       	cpc	r27, r19
  dc:	e1 f7       	brne	.-8      	; 0xd6 <__do_clear_bss>
  de:	e8 39       	cpi	r30, 0x98	; 152
  e0:	f4 07       	cpc	r31, r20
  e2:	21 f7       	brne	.-56     	; 0xac <__do_copy_data+0x8>
  e4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  e8:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>

Disassembly of section .text:

000001ee <__bad_interrupt>:
 1ee:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_15:

000000f0 <__vector_15>:
int seconds = 0;

int timerRunning = 0;

ISR ( TIMER0_COMP_vect )
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	0b b6       	in	r0, 0x3b	; 59
  fc:	0f 92       	push	r0
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	timerOverflow++;
 116:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <timerOverflow>
 11a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <timerOverflow+0x1>
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timerOverflow+0x1>
 124:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timerOverflow>
	
	if (timerOverflow == 1000)
 128:	88 3e       	cpi	r24, 0xE8	; 232
 12a:	93 40       	sbci	r25, 0x03	; 3
 12c:	31 f4       	brne	.+12     	; 0x13a <__vector_15+0x4a>
	{
		updateLight();
 12e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <updateLight>
		timerOverflow = 0;
 132:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <timerOverflow+0x1>
 136:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <timerOverflow>
	}
		
}
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	bf 91       	pop	r27
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	7f 91       	pop	r23
 148:	6f 91       	pop	r22
 14a:	5f 91       	pop	r21
 14c:	4f 91       	pop	r20
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0b be       	out	0x3b, r0	; 59
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

Disassembly of section .text.initTimer:

000001dc <initTimer>:
	return 1;
}

void initTimer()
{
	OCR0 = TICK_MS;
 1dc:	8a ef       	ldi	r24, 0xFA	; 250
 1de:	81 bf       	out	0x31, r24	; 49
	TIMSK |= (1<<7);
 1e0:	87 b7       	in	r24, 0x37	; 55
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	87 bf       	out	0x37, r24	; 55
	TCCR0 = 0b00000011;
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	83 bf       	out	0x33, r24	; 51
	sei();
 1ea:	78 94       	sei
 1ec:	08 95       	ret

Disassembly of section .text.main:

000001ae <main>:

void initTimer();

int main(void)
{
	DDRF = 0xFF;
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRB = 0x00;
 1b4:	17 ba       	out	0x17, r1	; 23
	
	TIMSK = 0b01000010;
 1b6:	82 e4       	ldi	r24, 0x42	; 66
 1b8:	87 bf       	out	0x37, r24	; 55
	
	initTimer();
 1ba:	0e 94 ee 00 	call	0x1dc	; 0x1dc <initTimer>
	
	playFirstSong();
 1be:	0e 94 b0 00 	call	0x160	; 0x160 <playFirstSong>
	
	return 1;
}
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	08 95       	ret

Disassembly of section .text.updateLight:

000001c8 <updateLight>:
};

int currentLight = 0;

void updateLight() {
	currentLight++;
 1c8:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <currentLight>
 1cc:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <currentLight+0x1>
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <currentLight+0x1>
 1d6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <currentLight>
 1da:	08 95       	ret

Disassembly of section .text.playFirstSong:

00000160 <playFirstSong>:
}

void playFirstSong() {

		PORTF = firstSong[currentLight].lightSequence;
 160:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <currentLight>
 164:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <currentLight+0x1>
 168:	fc 01       	movw	r30, r24
 16a:	ee 0f       	add	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	8e 0f       	add	r24, r30
 174:	9f 1f       	adc	r25, r31
 176:	fc 01       	movw	r30, r24
 178:	e0 50       	subi	r30, 0x00	; 0
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	82 81       	ldd	r24, Z+2	; 0x02
 17e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			{
				currentLight++;
			}
			*/
			
			if (currentLight >= (sizeof(firstSong) / sizeof(firstSong[0])))
 182:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <currentLight>
 186:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <currentLight+0x1>
 18a:	8a 30       	cpi	r24, 0x0A	; 10
 18c:	91 05       	cpc	r25, r1
 18e:	70 f4       	brcc	.+28     	; 0x1ac <playFirstSong+0x4c>
			{
				break;
			} else {
				PORTF = firstSong[currentLight].lightSequence;
 190:	fc 01       	movw	r30, r24
 192:	ee 0f       	add	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	ee 0f       	add	r30, r30
 198:	ff 1f       	adc	r31, r31
 19a:	8e 0f       	add	r24, r30
 19c:	9f 1f       	adc	r25, r31
 19e:	fc 01       	movw	r30, r24
 1a0:	e0 50       	subi	r30, 0x00	; 0
 1a2:	ff 4f       	sbci	r31, 0xFF	; 255
 1a4:	82 81       	ldd	r24, Z+2	; 0x02
 1a6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			}
		}
 1aa:	eb cf       	rjmp	.-42     	; 0x182 <playFirstSong+0x22>
 1ac:	08 95       	ret
