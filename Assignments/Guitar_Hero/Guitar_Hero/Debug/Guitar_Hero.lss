
Guitar_Hero.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e0  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000020f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a9f  00000000  00000000  0000023f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000007af  00000000  00000000  00000cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000025f  00000000  00000000  0000148d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000056  00000000  00000000  000019c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000168  00000168  000001dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.__vector_15 00000052  000000ea  000000ea  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.initTimer 00000012  00000156  00000156  000001ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000001a  0000013c  0000013c  000001b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.seconds  00000002  00800100  00800100  000001e0  2**0
                  ALLOC
 17 .bss.timerOverflow 00000002  00800102  00800102  000001e0  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
   8:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
   c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  10:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  14:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  18:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  1c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  20:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  24:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  28:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  2c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  30:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  34:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  38:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  3c:	0c 94 75 00 	jmp	0xea	; 0xea <_etext>
  40:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  44:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  48:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  4c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  50:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  54:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  58:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  5c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  60:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  64:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  68:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  6c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  70:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  74:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  78:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  7c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  80:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  84:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  88:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 04       	cpc	r0, r1
  90:	80 00       	.word	0x0080	; ????

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e1       	ldi	r29, 0x10	; 16
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	19 c0       	rjmp	.+50     	; 0xd8 <__do_clear_bss+0x8>
  a6:	b7 91       	elpm	r27, Z+
  a8:	a7 91       	elpm	r26, Z+
  aa:	37 91       	elpm	r19, Z+
  ac:	27 91       	elpm	r18, Z+
  ae:	07 91       	elpm	r16, Z+
  b0:	07 fd       	sbrc	r16, 7
  b2:	0e c0       	rjmp	.+28     	; 0xd0 <__do_clear_bss>
  b4:	97 91       	elpm	r25, Z+
  b6:	87 91       	elpm	r24, Z+
  b8:	ef 01       	movw	r28, r30
  ba:	f9 2f       	mov	r31, r25
  bc:	e8 2f       	mov	r30, r24
  be:	0b bf       	out	0x3b, r16	; 59
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x22>
  ca:	fe 01       	movw	r30, r28
  cc:	1b be       	out	0x3b, r1	; 59
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_clear_bss+0x8>

000000d0 <__do_clear_bss>:
  d0:	1d 92       	st	X+, r1
  d2:	a2 17       	cp	r26, r18
  d4:	b3 07       	cpc	r27, r19
  d6:	e1 f7       	brne	.-8      	; 0xd0 <__do_clear_bss>
  d8:	e1 39       	cpi	r30, 0x91	; 145
  da:	f4 07       	cpc	r31, r20
  dc:	21 f7       	brne	.-56     	; 0xa6 <__do_copy_data+0x8>
  de:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  e2:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

Disassembly of section .text:

00000168 <__bad_interrupt>:
 168:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_15:

000000ea <__vector_15>:

int timerOverflow = 0;
int seconds = 0;

ISR ( TIMER0_COMP_vect )
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
	timerOverflow++;
  fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <timerOverflow>
  fe:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <timerOverflow+0x1>
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <timerOverflow+0x1>
 108:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <timerOverflow>
	
	if (timerOverflow == 1000)
 10c:	88 3e       	cpi	r24, 0xE8	; 232
 10e:	93 40       	sbci	r25, 0x03	; 3
 110:	69 f4       	brne	.+26     	; 0x12c <__vector_15+0x42>
	{
		seconds++;
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 116:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		timerOverflow = 0;
 124:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timerOverflow+0x1>
 128:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <timerOverflow>
	}
}
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

Disassembly of section .text.initTimer:

00000156 <initTimer>:
	return 1;
}

void initTimer()
{
	OCR0 = TICK_MS;
 156:	8a ef       	ldi	r24, 0xFA	; 250
 158:	81 bf       	out	0x31, r24	; 49
	TIMSK |= (1<<7);
 15a:	87 b7       	in	r24, 0x37	; 55
 15c:	80 68       	ori	r24, 0x80	; 128
 15e:	87 bf       	out	0x37, r24	; 55
	TCCR0 = 0b00000011;
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	83 bf       	out	0x33, r24	; 51
	sei();
 164:	78 94       	sei
 166:	08 95       	ret

Disassembly of section .text.main:

0000013c <main>:

void initTimer();

int main(void)
{
	DDRF = 0xFF;
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRB = 0x00;
 142:	17 ba       	out	0x17, r1	; 23
	
	TIMSK = 0b01000010;
 144:	82 e4       	ldi	r24, 0x42	; 66
 146:	87 bf       	out	0x37, r24	; 55
	
	initTimer();
 148:	0e 94 ab 00 	call	0x156	; 0x156 <initTimer>
	
	while(1) {
		PORTF = seconds;
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 150:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 154:	fb cf       	rjmp	.-10     	; 0x14c <main+0x10>
