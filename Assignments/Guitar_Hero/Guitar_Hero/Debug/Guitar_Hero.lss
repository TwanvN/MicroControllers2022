
Guitar_Hero.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000280  00000314  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  00000343  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000e2e  00000000  00000000  0000039b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000854  00000000  00000000  000011c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000387  00000000  00000000  00001a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00001da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000028b  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000b6  00000000  00000000  000020cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00002185  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000024a  0000024a  000002de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000021c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.__vector_8 00000046  000001b4  000001b4  00000248  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_9 0000003a  000001fa  000001fa  0000028e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000016  00000234  00000234  000002c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.timerRunning 00000002  00800132  00800132  00000314  2**0
                  ALLOC
 17 .bss.timerOverflow 00000002  00800134  00800134  00000314  2**0
                  ALLOC
 18 .text.playFirstSong 000000c4  000000f0  000000f0  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .data.firstSong 00000032  00800100  0000024e  000002e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
   8:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
   c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  10:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  14:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  18:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  1c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  20:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_8>
  24:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_9>
  28:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  2c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  30:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  34:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  38:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  3c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  40:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  44:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  48:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  4c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  50:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  54:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  58:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  5c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  60:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  64:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  68:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  6c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  70:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  74:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  78:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  7c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  80:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  84:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  88:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 32       	cpi	r16, 0x21	; 33
  90:	00 02       	muls	r16, r16
  92:	4e 01       	movw	r8, r28
  94:	32 01       	movw	r6, r4
  96:	36 80       	ldd	r3, Z+6	; 0x06

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	ec e8       	ldi	r30, 0x8C	; 140
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	19 c0       	rjmp	.+50     	; 0xde <__do_clear_bss+0x8>
  ac:	b7 91       	elpm	r27, Z+
  ae:	a7 91       	elpm	r26, Z+
  b0:	37 91       	elpm	r19, Z+
  b2:	27 91       	elpm	r18, Z+
  b4:	07 91       	elpm	r16, Z+
  b6:	07 fd       	sbrc	r16, 7
  b8:	0e c0       	rjmp	.+28     	; 0xd6 <__do_clear_bss>
  ba:	97 91       	elpm	r25, Z+
  bc:	87 91       	elpm	r24, Z+
  be:	ef 01       	movw	r28, r30
  c0:	f9 2f       	mov	r31, r25
  c2:	e8 2f       	mov	r30, r24
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	07 90       	elpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	a2 17       	cp	r26, r18
  cc:	b3 07       	cpc	r27, r19
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x22>
  d0:	fe 01       	movw	r30, r28
  d2:	1b be       	out	0x3b, r1	; 59
  d4:	04 c0       	rjmp	.+8      	; 0xde <__do_clear_bss+0x8>

000000d6 <__do_clear_bss>:
  d6:	1d 92       	st	X+, r1
  d8:	a2 17       	cp	r26, r18
  da:	b3 07       	cpc	r27, r19
  dc:	e1 f7       	brne	.-8      	; 0xd6 <__do_clear_bss>
  de:	e8 39       	cpi	r30, 0x98	; 152
  e0:	f4 07       	cpc	r31, r20
  e2:	21 f7       	brne	.-56     	; 0xac <__do_copy_data+0x8>
  e4:	0e 94 1a 01 	call	0x234	; 0x234 <main>
  e8:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>

Disassembly of section .text:

0000024a <__bad_interrupt>:
 24a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_8:

000001b4 <__vector_8>:
int timerOverflow = 0;

int timerRunning = 0;

ISR ( INT7_vect )
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
	if (timerRunning == 0)
 1c2:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <timerRunning>
 1c6:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <timerRunning+0x1>
 1ca:	89 2b       	or	r24, r25
 1cc:	59 f4       	brne	.+22     	; 0x1e4 <__vector_8+0x30>
	{
		timerOverflow = 0; 
 1ce:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <timerOverflow+0x1>
 1d2:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <timerOverflow>
		timerRunning = 1;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timerRunning+0x1>
 1de:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timerRunning>
 1e2:	04 c0       	rjmp	.+8      	; 0x1ec <__vector_8+0x38>
	} 
	else
	{
		timerRunning = 0;		
 1e4:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <timerRunning+0x1>
 1e8:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <timerRunning>
	}
	
		
}
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

Disassembly of section .text.__vector_9:

000001fa <__vector_9>:

ISR ( TIMER2_COMP_vect )
{
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
	if (timerRunning)
 208:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <timerRunning>
 20c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <timerRunning+0x1>
 210:	89 2b       	or	r24, r25
 212:	49 f0       	breq	.+18     	; 0x226 <__vector_9+0x2c>
		timerOverflow++;
 214:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <timerOverflow>
 218:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <timerOverflow+0x1>
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timerOverflow+0x1>
 222:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timerOverflow>
}
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

Disassembly of section .text.main:

00000234 <main>:

void initTimer();

int main(void)
{
	DDRF = 0xFF;
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRB = 0x00;
 23a:	17 ba       	out	0x17, r1	; 23
	
	TIMSK = 0b00011000;
 23c:	88 e1       	ldi	r24, 0x18	; 24
 23e:	87 bf       	out	0x37, r24	; 55
	
	playFirstSong();
 240:	0e 94 78 00 	call	0xf0	; 0xf0 <__data_load_end>
	
	return 1;
}
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	08 95       	ret

Disassembly of section .text.playFirstSong:

000000f0 <playFirstSong>:

void playFirstSong() {

		int index = 0;

		PORTF = firstSong[index].lightSequence;
  f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  f4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	{5, 0b00001000, 2}	
};

void playFirstSong() {

		int index = 0;
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0

		PORTF = firstSong[index].lightSequence;
		
		while(1) {

			if (PINB == 0b00010000 && firstSong[index].lightID == 1)
  fc:	26 b3       	in	r18, 0x16	; 22
  fe:	20 31       	cpi	r18, 0x10	; 16
 100:	81 f4       	brne	.+32     	; 0x122 <playFirstSong+0x32>
 102:	fc 01       	movw	r30, r24
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	ee 0f       	add	r30, r30
 10a:	ff 1f       	adc	r31, r31
 10c:	e8 0f       	add	r30, r24
 10e:	f9 1f       	adc	r31, r25
 110:	e0 50       	subi	r30, 0x00	; 0
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	23 81       	ldd	r18, Z+3	; 0x03
 116:	34 81       	ldd	r19, Z+4	; 0x04
 118:	21 30       	cpi	r18, 0x01	; 1
 11a:	31 05       	cpc	r19, r1
 11c:	11 f4       	brne	.+4      	; 0x122 <playFirstSong+0x32>
			{
				index++;
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	38 c0       	rjmp	.+112    	; 0x192 <playFirstSong+0xa2>
			} else if (PINB == 0b00000010 && firstSong[index].lightID == 2)
 122:	26 b3       	in	r18, 0x16	; 22
 124:	22 30       	cpi	r18, 0x02	; 2
 126:	81 f4       	brne	.+32     	; 0x148 <playFirstSong+0x58>
 128:	fc 01       	movw	r30, r24
 12a:	ee 0f       	add	r30, r30
 12c:	ff 1f       	adc	r31, r31
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	e8 0f       	add	r30, r24
 134:	f9 1f       	adc	r31, r25
 136:	e0 50       	subi	r30, 0x00	; 0
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	23 81       	ldd	r18, Z+3	; 0x03
 13c:	34 81       	ldd	r19, Z+4	; 0x04
 13e:	22 30       	cpi	r18, 0x02	; 2
 140:	31 05       	cpc	r19, r1
 142:	11 f4       	brne	.+4      	; 0x148 <playFirstSong+0x58>
			{
				index++;
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	25 c0       	rjmp	.+74     	; 0x192 <playFirstSong+0xa2>
			} else if (PINB == 0b00000100 && firstSong[index].lightID == 3)
 148:	26 b3       	in	r18, 0x16	; 22
 14a:	24 30       	cpi	r18, 0x04	; 4
 14c:	81 f4       	brne	.+32     	; 0x16e <playFirstSong+0x7e>
 14e:	fc 01       	movw	r30, r24
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	e8 0f       	add	r30, r24
 15a:	f9 1f       	adc	r31, r25
 15c:	e0 50       	subi	r30, 0x00	; 0
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	23 81       	ldd	r18, Z+3	; 0x03
 162:	34 81       	ldd	r19, Z+4	; 0x04
 164:	23 30       	cpi	r18, 0x03	; 3
 166:	31 05       	cpc	r19, r1
 168:	11 f4       	brne	.+4      	; 0x16e <playFirstSong+0x7e>
			{
				index++;
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	12 c0       	rjmp	.+36     	; 0x192 <playFirstSong+0xa2>
			} else if (PINB == 0b00001000 && firstSong[index].lightID == 4)
 16e:	26 b3       	in	r18, 0x16	; 22
 170:	28 30       	cpi	r18, 0x08	; 8
 172:	79 f4       	brne	.+30     	; 0x192 <playFirstSong+0xa2>
 174:	fc 01       	movw	r30, r24
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	e8 0f       	add	r30, r24
 180:	f9 1f       	adc	r31, r25
 182:	e0 50       	subi	r30, 0x00	; 0
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	23 81       	ldd	r18, Z+3	; 0x03
 188:	34 81       	ldd	r19, Z+4	; 0x04
 18a:	24 30       	cpi	r18, 0x04	; 4
 18c:	31 05       	cpc	r19, r1
 18e:	09 f4       	brne	.+2      	; 0x192 <playFirstSong+0xa2>
			{
				index++;
 190:	01 96       	adiw	r24, 0x01	; 1
			}
			
			if (index >= (sizeof(firstSong) / sizeof(firstSong[0])))
 192:	8a 30       	cpi	r24, 0x0A	; 10
 194:	91 05       	cpc	r25, r1
 196:	68 f4       	brcc	.+26     	; 0x1b2 <playFirstSong+0xc2>
			{
				break;
			} else {
				PORTF = firstSong[index].lightSequence;
 198:	fc 01       	movw	r30, r24
 19a:	ee 0f       	add	r30, r30
 19c:	ff 1f       	adc	r31, r31
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	e8 0f       	add	r30, r24
 1a4:	f9 1f       	adc	r31, r25
 1a6:	e0 50       	subi	r30, 0x00	; 0
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	22 81       	ldd	r18, Z+2	; 0x02
 1ac:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			}
		}
 1b0:	a5 cf       	rjmp	.-182    	; 0xfc <playFirstSong+0xc>
 1b2:	08 95       	ret
