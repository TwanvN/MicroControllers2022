
Guitar_Hero.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000003c2  00000456  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000456  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  00000485  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000ec4  00000000  00000000  000004e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000845  00000000  00000000  000013a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003c2  00000000  00000000  00001bee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d0  00000000  00000000  00001fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000297  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000cb  00000000  00000000  00002317  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  000023e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000378  00000378  0000040c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002424  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.__vector_15 00000070  00000292  00000292  00000326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.initTimer 00000012  00000366  00000366  000003fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.pwmInit 00000032  00000302  00000302  00000396  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    0000001e  00000334  00000334  000003c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.timerOverflow 00000002  00800146  00800146  00000456  2**0
                  ALLOC
 18 .text.updateLight 00000014  00000352  00000352  000003e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.playFirstSong 000001a2  000000f0  000000f0  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.currentLight 00000002  00800148  00800148  00000456  2**0
                  ALLOC
 21 .data.firstSong 00000046  00800100  0000037c  00000410  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
   8:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
   c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  10:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  14:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  18:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  1c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  20:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  24:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  28:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  2c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  30:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  34:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  38:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  3c:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_15>
  40:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  44:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  48:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  4c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  50:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  54:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  58:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  5c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  60:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  64:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  68:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  6c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  70:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  74:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  78:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  7c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  80:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  84:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  88:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 46       	sbci	r16, 0x61	; 97
  90:	00 03       	mulsu	r16, r16
  92:	7c 01       	movw	r14, r24
  94:	46 01       	movw	r8, r12
  96:	4a 80       	ldd	r4, Y+2	; 0x02

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	ec e8       	ldi	r30, 0x8C	; 140
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	19 c0       	rjmp	.+50     	; 0xde <__do_clear_bss+0x8>
  ac:	b7 91       	elpm	r27, Z+
  ae:	a7 91       	elpm	r26, Z+
  b0:	37 91       	elpm	r19, Z+
  b2:	27 91       	elpm	r18, Z+
  b4:	07 91       	elpm	r16, Z+
  b6:	07 fd       	sbrc	r16, 7
  b8:	0e c0       	rjmp	.+28     	; 0xd6 <__do_clear_bss>
  ba:	97 91       	elpm	r25, Z+
  bc:	87 91       	elpm	r24, Z+
  be:	ef 01       	movw	r28, r30
  c0:	f9 2f       	mov	r31, r25
  c2:	e8 2f       	mov	r30, r24
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	07 90       	elpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	a2 17       	cp	r26, r18
  cc:	b3 07       	cpc	r27, r19
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x22>
  d0:	fe 01       	movw	r30, r28
  d2:	1b be       	out	0x3b, r1	; 59
  d4:	04 c0       	rjmp	.+8      	; 0xde <__do_clear_bss+0x8>

000000d6 <__do_clear_bss>:
  d6:	1d 92       	st	X+, r1
  d8:	a2 17       	cp	r26, r18
  da:	b3 07       	cpc	r27, r19
  dc:	e1 f7       	brne	.-8      	; 0xd6 <__do_clear_bss>
  de:	e8 39       	cpi	r30, 0x98	; 152
  e0:	f4 07       	cpc	r31, r20
  e2:	21 f7       	brne	.-56     	; 0xac <__do_copy_data+0x8>
  e4:	0e 94 9a 01 	call	0x334	; 0x334 <main>
  e8:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>

Disassembly of section .text:

00000378 <__bad_interrupt>:
 378:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_15:

00000292 <__vector_15>:
int seconds = 0;

int timerRunning = 0;

ISR ( TIMER0_COMP_vect )
{
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	0b b6       	in	r0, 0x3b	; 59
 29e:	0f 92       	push	r0
 2a0:	2f 93       	push	r18
 2a2:	3f 93       	push	r19
 2a4:	4f 93       	push	r20
 2a6:	5f 93       	push	r21
 2a8:	6f 93       	push	r22
 2aa:	7f 93       	push	r23
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
 2b0:	af 93       	push	r26
 2b2:	bf 93       	push	r27
 2b4:	ef 93       	push	r30
 2b6:	ff 93       	push	r31
	timerOverflow++;
 2b8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <timerOverflow>
 2bc:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <timerOverflow+0x1>
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timerOverflow+0x1>
 2c6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timerOverflow>
	
	if (timerOverflow == 1500)
 2ca:	8c 3d       	cpi	r24, 0xDC	; 220
 2cc:	95 40       	sbci	r25, 0x05	; 5
 2ce:	31 f4       	brne	.+12     	; 0x2dc <__vector_15+0x4a>
	{
		updateLight();
 2d0:	0e 94 a9 01 	call	0x352	; 0x352 <updateLight>
		timerOverflow = 0;
 2d4:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <timerOverflow+0x1>
 2d8:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <timerOverflow>
	}
		
}
 2dc:	ff 91       	pop	r31
 2de:	ef 91       	pop	r30
 2e0:	bf 91       	pop	r27
 2e2:	af 91       	pop	r26
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	7f 91       	pop	r23
 2ea:	6f 91       	pop	r22
 2ec:	5f 91       	pop	r21
 2ee:	4f 91       	pop	r20
 2f0:	3f 91       	pop	r19
 2f2:	2f 91       	pop	r18
 2f4:	0f 90       	pop	r0
 2f6:	0b be       	out	0x3b, r0	; 59
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

Disassembly of section .text.initTimer:

00000366 <initTimer>:
	return 1;
}

void initTimer()
{
	OCR0 = TICK_MS;
 366:	8a ef       	ldi	r24, 0xFA	; 250
 368:	81 bf       	out	0x31, r24	; 49
	TIMSK |= (1<<7);
 36a:	87 b7       	in	r24, 0x37	; 55
 36c:	80 68       	ori	r24, 0x80	; 128
 36e:	87 bf       	out	0x37, r24	; 55
	TCCR0 = 0b00000011;
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	83 bf       	out	0x33, r24	; 51
	sei();
 374:	78 94       	sei
 376:	08 95       	ret

Disassembly of section .text.pwmInit:

00000302 <pwmInit>:
}

void pwmInit() {
	DDRE = 0xFF;
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	82 b9       	out	0x02, r24	; 2
	TCNT3 = 0;
 306:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 30a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	TCCR3A = 0b00101001;
 30e:	89 e2       	ldi	r24, 0x29	; 41
 310:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = 0b01010010;
 314:	82 e5       	ldi	r24, 0x52	; 82
 316:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	
	OCR3A = 100;
 31a:	84 e6       	ldi	r24, 0x64	; 100
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 322:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR3B = 10;
 326:	8a e0       	ldi	r24, 0x0A	; 10
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 32e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 332:	08 95       	ret

Disassembly of section .text.main:

00000334 <main>:
void initTimer();
void pwmInit();

int main(void)
{
	DDRF = 0xFF;
 334:	8f ef       	ldi	r24, 0xFF	; 255
 336:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRB = 0x00;
 33a:	17 ba       	out	0x17, r1	; 23
	
	TIMSK = 0b01000010;
 33c:	82 e4       	ldi	r24, 0x42	; 66
 33e:	87 bf       	out	0x37, r24	; 55
	
	initTimer();
 340:	0e 94 b3 01 	call	0x366	; 0x366 <initTimer>
	pwmInit();
 344:	0e 94 81 01 	call	0x302	; 0x302 <pwmInit>
	
	playFirstSong();
 348:	0e 94 78 00 	call	0xf0	; 0xf0 <__data_load_end>
	
	return 1;
}
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	08 95       	ret

Disassembly of section .text.updateLight:

00000352 <updateLight>:
};

int currentLight = 0;

void updateLight() {
	currentLight++;
 352:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <currentLight>
 356:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <currentLight+0x1>
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <currentLight+0x1>
 360:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <currentLight>
 364:	08 95       	ret

Disassembly of section .text.playFirstSong:

000000f0 <playFirstSong>:
}

void playFirstSong() {

		PORTF = firstSong[currentLight].lightSequence;
  f0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <currentLight>
  f4:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <currentLight+0x1>
  f8:	fc 01       	movw	r30, r24
  fa:	ee 0f       	add	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	ee 0f       	add	r30, r30
 100:	ff 1f       	adc	r31, r31
 102:	ee 0f       	add	r30, r30
 104:	ff 1f       	adc	r31, r31
 106:	e8 1b       	sub	r30, r24
 108:	f9 0b       	sbc	r31, r25
 10a:	e0 50       	subi	r30, 0x00	; 0
 10c:	ff 4f       	sbci	r31, 0xFF	; 255
 10e:	82 81       	ldd	r24, Z+2	; 0x02
 110:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		
		while(1) {
			
			if (PINB == 0b00010000 && firstSong[currentLight].lightID == 1)
 114:	86 b3       	in	r24, 0x16	; 22
 116:	80 31       	cpi	r24, 0x10	; 16
 118:	31 f5       	brne	.+76     	; 0x166 <playFirstSong+0x76>
 11a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <currentLight>
 11e:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <currentLight+0x1>
 122:	fc 01       	movw	r30, r24
 124:	ee 0f       	add	r30, r30
 126:	ff 1f       	adc	r31, r31
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	e8 1b       	sub	r30, r24
 132:	f9 0b       	sbc	r31, r25
 134:	e0 50       	subi	r30, 0x00	; 0
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	23 81       	ldd	r18, Z+3	; 0x03
 13a:	34 81       	ldd	r19, Z+4	; 0x04
 13c:	21 30       	cpi	r18, 0x01	; 1
 13e:	31 05       	cpc	r19, r1
 140:	91 f4       	brne	.+36     	; 0x166 <playFirstSong+0x76>
			{
				OCR3B = firstSong[currentLight].pwmSignal;
 142:	fc 01       	movw	r30, r24
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	ee 0f       	add	r30, r30
 14e:	ff 1f       	adc	r31, r31
 150:	e8 1b       	sub	r30, r24
 152:	f9 0b       	sbc	r31, r25
 154:	e0 50       	subi	r30, 0x00	; 0
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	85 81       	ldd	r24, Z+5	; 0x05
 15a:	96 81       	ldd	r25, Z+6	; 0x06
 15c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 160:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 164:	7f c0       	rjmp	.+254    	; 0x264 <playFirstSong+0x174>
			} else if (PINB == 0b00000010 && firstSong[currentLight].lightID == 2)
 166:	86 b3       	in	r24, 0x16	; 22
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	31 f5       	brne	.+76     	; 0x1b8 <playFirstSong+0xc8>
 16c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <currentLight>
 170:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <currentLight+0x1>
 174:	fc 01       	movw	r30, r24
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	e8 1b       	sub	r30, r24
 184:	f9 0b       	sbc	r31, r25
 186:	e0 50       	subi	r30, 0x00	; 0
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	23 81       	ldd	r18, Z+3	; 0x03
 18c:	34 81       	ldd	r19, Z+4	; 0x04
 18e:	22 30       	cpi	r18, 0x02	; 2
 190:	31 05       	cpc	r19, r1
 192:	91 f4       	brne	.+36     	; 0x1b8 <playFirstSong+0xc8>
			{
				OCR3B = firstSong[currentLight].pwmSignal;
 194:	fc 01       	movw	r30, r24
 196:	ee 0f       	add	r30, r30
 198:	ff 1f       	adc	r31, r31
 19a:	ee 0f       	add	r30, r30
 19c:	ff 1f       	adc	r31, r31
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	e8 1b       	sub	r30, r24
 1a4:	f9 0b       	sbc	r31, r25
 1a6:	e0 50       	subi	r30, 0x00	; 0
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	85 81       	ldd	r24, Z+5	; 0x05
 1ac:	96 81       	ldd	r25, Z+6	; 0x06
 1ae:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1b2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1b6:	56 c0       	rjmp	.+172    	; 0x264 <playFirstSong+0x174>
			} else if (PINB == 0b00000100 && firstSong[currentLight].lightID == 3)
 1b8:	86 b3       	in	r24, 0x16	; 22
 1ba:	84 30       	cpi	r24, 0x04	; 4
 1bc:	31 f5       	brne	.+76     	; 0x20a <playFirstSong+0x11a>
 1be:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <currentLight>
 1c2:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <currentLight+0x1>
 1c6:	fc 01       	movw	r30, r24
 1c8:	ee 0f       	add	r30, r30
 1ca:	ff 1f       	adc	r31, r31
 1cc:	ee 0f       	add	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	ee 0f       	add	r30, r30
 1d2:	ff 1f       	adc	r31, r31
 1d4:	e8 1b       	sub	r30, r24
 1d6:	f9 0b       	sbc	r31, r25
 1d8:	e0 50       	subi	r30, 0x00	; 0
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	23 81       	ldd	r18, Z+3	; 0x03
 1de:	34 81       	ldd	r19, Z+4	; 0x04
 1e0:	23 30       	cpi	r18, 0x03	; 3
 1e2:	31 05       	cpc	r19, r1
 1e4:	91 f4       	brne	.+36     	; 0x20a <playFirstSong+0x11a>
			{
				OCR3B = firstSong[currentLight].pwmSignal;
 1e6:	fc 01       	movw	r30, r24
 1e8:	ee 0f       	add	r30, r30
 1ea:	ff 1f       	adc	r31, r31
 1ec:	ee 0f       	add	r30, r30
 1ee:	ff 1f       	adc	r31, r31
 1f0:	ee 0f       	add	r30, r30
 1f2:	ff 1f       	adc	r31, r31
 1f4:	e8 1b       	sub	r30, r24
 1f6:	f9 0b       	sbc	r31, r25
 1f8:	e0 50       	subi	r30, 0x00	; 0
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	85 81       	ldd	r24, Z+5	; 0x05
 1fe:	96 81       	ldd	r25, Z+6	; 0x06
 200:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 204:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 208:	2d c0       	rjmp	.+90     	; 0x264 <playFirstSong+0x174>
			} else if (PINB == 0b00001000 && firstSong[currentLight].lightID == 4)
 20a:	86 b3       	in	r24, 0x16	; 22
 20c:	88 30       	cpi	r24, 0x08	; 8
 20e:	31 f5       	brne	.+76     	; 0x25c <playFirstSong+0x16c>
 210:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <currentLight>
 214:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <currentLight+0x1>
 218:	fc 01       	movw	r30, r24
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	ee 0f       	add	r30, r30
 220:	ff 1f       	adc	r31, r31
 222:	ee 0f       	add	r30, r30
 224:	ff 1f       	adc	r31, r31
 226:	e8 1b       	sub	r30, r24
 228:	f9 0b       	sbc	r31, r25
 22a:	e0 50       	subi	r30, 0x00	; 0
 22c:	ff 4f       	sbci	r31, 0xFF	; 255
 22e:	23 81       	ldd	r18, Z+3	; 0x03
 230:	34 81       	ldd	r19, Z+4	; 0x04
 232:	24 30       	cpi	r18, 0x04	; 4
 234:	31 05       	cpc	r19, r1
 236:	91 f4       	brne	.+36     	; 0x25c <playFirstSong+0x16c>
			{
				OCR3B = firstSong[currentLight].pwmSignal;
 238:	fc 01       	movw	r30, r24
 23a:	ee 0f       	add	r30, r30
 23c:	ff 1f       	adc	r31, r31
 23e:	ee 0f       	add	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	ee 0f       	add	r30, r30
 244:	ff 1f       	adc	r31, r31
 246:	e8 1b       	sub	r30, r24
 248:	f9 0b       	sbc	r31, r25
 24a:	e0 50       	subi	r30, 0x00	; 0
 24c:	ff 4f       	sbci	r31, 0xFF	; 255
 24e:	85 81       	ldd	r24, Z+5	; 0x05
 250:	96 81       	ldd	r25, Z+6	; 0x06
 252:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 256:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 25a:	04 c0       	rjmp	.+8      	; 0x264 <playFirstSong+0x174>
			} else {
				OCR3B = 0x00;
 25c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 260:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
			}
			
			if (currentLight >= (sizeof(firstSong) / sizeof(firstSong[0])))
 264:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <currentLight>
 268:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <currentLight+0x1>
 26c:	8a 30       	cpi	r24, 0x0A	; 10
 26e:	91 05       	cpc	r25, r1
 270:	78 f4       	brcc	.+30     	; 0x290 <playFirstSong+0x1a0>
			{
				break;
			} else {
				PORTF = firstSong[currentLight].lightSequence;
 272:	fc 01       	movw	r30, r24
 274:	ee 0f       	add	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	ee 0f       	add	r30, r30
 27a:	ff 1f       	adc	r31, r31
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	e8 1b       	sub	r30, r24
 282:	f9 0b       	sbc	r31, r25
 284:	e0 50       	subi	r30, 0x00	; 0
 286:	ff 4f       	sbci	r31, 0xFF	; 255
 288:	82 81       	ldd	r24, Z+2	; 0x02
 28a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			}
		}
 28e:	42 cf       	rjmp	.-380    	; 0x114 <playFirstSong+0x24>
 290:	08 95       	ret
