
Guitar_Hero.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c88  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005b  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000090  00000000  00000000  00000ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000012d1  00000000  00000000  00000d73  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000a66  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005c0  00000000  00000000  00002aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000170  00000000  00000000  0000306c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002cc  00000000  00000000  000031dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000049f  00000000  00000000  000034a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000070  00000000  00000000  00003947  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000bf0  00000bf0  00000c84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000039b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_strobe_lcd_e 00000026  00000a82  00000a82  00000b16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.init_4bits_mode 0000003c  00000a0e  00000a0e  00000aa2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_write_char 00000024  00000aa8  00000aa8  00000b3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_write_command 00000024  00000acc  00000acc  00000b60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_clear 0000001a  00000b2e  00000b2e  00000bc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_init 0000001c  00000b12  00000b12  00000ba6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_display_text 0000001a  00000b48  00000b48  00000bdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LCD_set_cursor 00000008  00000bda  00000bda  00000c6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_8 0000008c  0000078e  0000078e  00000822  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_10 00000016  00000b62  00000b62  00000bf6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.initTimer 00000010  00000b78  00000b78  00000c0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .progmemx.data 00000009  000000ea  000000ea  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 25 .text.main    000000ba  000006d4  000006d4  00000768  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .bss.ticksOnTrigger 00000001  00800102  00800102  00000c88  2**0
                  ALLOC
 27 .bss.currentDistance 00000002  00800100  00800100  00000c88  2**0
                  ALLOC
 28 .text.avrlibc.fplib 0000000e  00000b88  00000b88  00000c1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.avrlibc.fplib 0000005e  0000096c  0000096c  00000a00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.avrlibc.fplib 0000007a  0000081a  0000081a  000008ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.avrlibc.fplib 00000044  000009ca  000009ca  00000a5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.avrlibc.fplib 0000000e  00000b96  00000b96  00000c2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.avrlibc.fplib 00000008  00000be2  00000be2  00000c76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.avrlibc.fplib 000000d4  00000544  00000544  000005d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.avrlibc.fplib 0000000c  00000bce  00000bce  00000c62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.avrlibc.fplib 00000006  00000bea  00000bea  00000c7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.avrlibc.fplib 0000000e  00000ba4  00000ba4  00000c38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.avrlibc.fplib 0000000e  00000bb2  00000bb2  00000c46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.avrlibc.fplib 00000022  00000af0  00000af0  00000b84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.avrlibc 00000060  0000090c  0000090c  000009a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.avrlibc 00000450  000000f4  000000f4  00000188  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.avrlibc 00000038  00000a4a  00000a4a  00000ade  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.avrlibc 00000078  00000894  00000894  00000928  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.avrlibc 000000bc  00000618  00000618  000006ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.libgcc  0000000e  00000bc0  00000bc0  00000c54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
   8:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
   c:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  10:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  14:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  18:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  1c:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  20:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__vector_8>
  24:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  28:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__vector_10>
  2c:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  30:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  34:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  38:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  3c:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  40:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  44:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  48:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  4c:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  50:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  54:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  58:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  5c:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  60:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  64:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  68:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  6c:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  70:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  74:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  78:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  7c:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  80:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  84:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>
  88:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 03       	mulsu	r16, r17
  90:	80 00       	.word	0x0080	; ????

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e1       	ldi	r29, 0x10	; 16
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	19 c0       	rjmp	.+50     	; 0xd8 <__do_clear_bss+0x8>
  a6:	b7 91       	elpm	r27, Z+
  a8:	a7 91       	elpm	r26, Z+
  aa:	37 91       	elpm	r19, Z+
  ac:	27 91       	elpm	r18, Z+
  ae:	07 91       	elpm	r16, Z+
  b0:	07 fd       	sbrc	r16, 7
  b2:	0e c0       	rjmp	.+28     	; 0xd0 <__do_clear_bss>
  b4:	97 91       	elpm	r25, Z+
  b6:	87 91       	elpm	r24, Z+
  b8:	ef 01       	movw	r28, r30
  ba:	f9 2f       	mov	r31, r25
  bc:	e8 2f       	mov	r30, r24
  be:	0b bf       	out	0x3b, r16	; 59
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x22>
  ca:	fe 01       	movw	r30, r28
  cc:	1b be       	out	0x3b, r1	; 59
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_clear_bss+0x8>

000000d0 <__do_clear_bss>:
  d0:	1d 92       	st	X+, r1
  d2:	a2 17       	cp	r26, r18
  d4:	b3 07       	cpc	r27, r19
  d6:	e1 f7       	brne	.-8      	; 0xd0 <__do_clear_bss>
  d8:	e1 39       	cpi	r30, 0x91	; 145
  da:	f4 07       	cpc	r31, r20
  dc:	21 f7       	brne	.-56     	; 0xa6 <__do_copy_data+0x8>
  de:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <main>
  e2:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

Disassembly of section .text:

00000bf0 <__bad_interrupt>:
 bf0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.lcd_strobe_lcd_e:

00000a82 <lcd_strobe_lcd_e>:
#define LCD_E 	6  // RA6 UNI-6
#define LCD_RS	4  // RA4 UNI-6

// Locks in a set position by setting E high and low
void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// set E high
 a82:	8b b3       	in	r24, 0x1b	; 27
 a84:	80 64       	ori	r24, 0x40	; 64
 a86:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a88:	89 ef       	ldi	r24, 0xF9	; 249
 a8a:	90 e0       	ldi	r25, 0x00	; 0
 a8c:	01 97       	sbiw	r24, 0x01	; 1
 a8e:	f1 f7       	brne	.-4      	; 0xa8c <lcd_strobe_lcd_e+0xa>
 a90:	00 c0       	rjmp	.+0      	; 0xa92 <lcd_strobe_lcd_e+0x10>
 a92:	00 00       	nop
	_delay_ms(1);			// Small delay to process
	PORTA &= ~(1<<LCD_E);  	// set E low
 a94:	8b b3       	in	r24, 0x1b	; 27
 a96:	8f 7b       	andi	r24, 0xBF	; 191
 a98:	8b bb       	out	0x1b, r24	; 27
 a9a:	89 ef       	ldi	r24, 0xF9	; 249
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	01 97       	sbiw	r24, 0x01	; 1
 aa0:	f1 f7       	brne	.-4      	; 0xa9e <lcd_strobe_lcd_e+0x1c>
 aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <lcd_strobe_lcd_e+0x22>
 aa4:	00 00       	nop
 aa6:	08 95       	ret

Disassembly of section .text.init_4bits_mode:

00000a0e <init_4bits_mode>:
}

/*
 * Sets the lcd display to the correct 4 pin mode.
 */
void init_4bits_mode(void) {
 a0e:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	PORTC = 0x00;
 a10:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 a12:	1b ba       	out	0x1b, r1	; 27

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 a14:	c0 e2       	ldi	r28, 0x20	; 32
 a16:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 a18:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
 a1c:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 a1e:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_strobe_lcd_e>
	PORTC = 0x80;
 a22:	80 e8       	ldi	r24, 0x80	; 128
 a24:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 a26:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 a2a:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 a2c:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_strobe_lcd_e>
	PORTC = 0xF0;
 a30:	80 ef       	ldi	r24, 0xF0	; 240
 a32:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 a34:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 a38:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 a3a:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_strobe_lcd_e>
	PORTC = 0x60;
 a3e:	80 e6       	ldi	r24, 0x60	; 96
 a40:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 a42:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_strobe_lcd_e>
}
 a46:	cf 91       	pop	r28
 a48:	08 95       	ret

Disassembly of section .text.lcd_write_char:

00000aa8 <lcd_write_char>:

// Writes a command to the LCD display
// This by setting RS high
void lcd_write_char(unsigned char byte) {
 aa8:	cf 93       	push	r28
 aaa:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 aac:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 aae:	8b b3       	in	r24, 0x1b	; 27
 ab0:	80 61       	ori	r24, 0x10	; 16
 ab2:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 ab4:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 ab8:	c2 95       	swap	r28
 aba:	c0 7f       	andi	r28, 0xF0	; 240
 abc:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 abe:	8b b3       	in	r24, 0x1b	; 27
 ac0:	80 61       	ori	r24, 0x10	; 16
 ac2:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 ac4:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_strobe_lcd_e>
}
 ac8:	cf 91       	pop	r28
 aca:	08 95       	ret

Disassembly of section .text.lcd_write_command:

00000acc <lcd_write_command>:


// Writes a command to the LCD display
// This by setting RS low
void lcd_write_command(unsigned char byte) {
 acc:	cf 93       	push	r28
 ace:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 ad0:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 ad2:	8b b3       	in	r24, 0x1b	; 27
 ad4:	8f 7e       	andi	r24, 0xEF	; 239
 ad6:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 ad8:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 adc:	c2 95       	swap	r28
 ade:	c0 7f       	andi	r28, 0xF0	; 240
 ae0:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 ae2:	8b b3       	in	r24, 0x1b	; 27
 ae4:	8f 7e       	andi	r24, 0xEF	; 239
 ae6:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 ae8:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_strobe_lcd_e>
}
 aec:	cf 91       	pop	r28
 aee:	08 95       	ret

Disassembly of section .text.lcd_clear:

00000b2e <lcd_clear>:

void lcd_clear() {
	lcd_write_command (0x01); // 0x01 clear the entire display
 b2e:	81 e0       	ldi	r24, 0x01	; 1
 b30:	0e 94 66 05 	call	0xacc	; 0xacc <lcd_write_command>
 b34:	83 ef       	ldi	r24, 0xF3	; 243
 b36:	91 e0       	ldi	r25, 0x01	; 1
 b38:	01 97       	sbiw	r24, 0x01	; 1
 b3a:	f1 f7       	brne	.-4      	; 0xb38 <lcd_clear+0xa>
 b3c:	00 c0       	rjmp	.+0      	; 0xb3e <lcd_clear+0x10>
 b3e:	00 00       	nop
	_delay_ms(2);			  // small delay
	lcd_write_command (0x80); // 0x80 moves the cursor to the start
 b40:	80 e8       	ldi	r24, 0x80	; 128
 b42:	0e 94 66 05 	call	0xacc	; 0xacc <lcd_write_command>
 b46:	08 95       	ret

Disassembly of section .text.LCD_init:

00000b12 <LCD_init>:
*/
void LCD_init() 
{

		// Setting DDRC to output, these are used in writing data to the LCD
		DDRA = 0xFF;
 b12:	8f ef       	ldi	r24, 0xFF	; 255
 b14:	8a bb       	out	0x1a, r24	; 26
		DDRC = 0xFF;			
 b16:	84 bb       	out	0x14, r24	; 20
		
		// Setting the LCD to use the 4 bit mode
		init_4bits_mode();
 b18:	0e 94 07 05 	call	0xa0e	; 0xa0e <init_4bits_mode>
 b1c:	83 ec       	ldi	r24, 0xC3	; 195
 b1e:	99 e0       	ldi	r25, 0x09	; 9
 b20:	01 97       	sbiw	r24, 0x01	; 1
 b22:	f1 f7       	brne	.-4      	; 0xb20 <LCD_init+0xe>
 b24:	00 c0       	rjmp	.+0      	; 0xb26 <LCD_init+0x14>
 b26:	00 00       	nop
		
		// Wait a bit to complete the init
		_delay_ms(10);
		
		// Clearing the LCD
		lcd_clear();
 b28:	0e 94 97 05 	call	0xb2e	; 0xb2e <lcd_clear>
 b2c:	08 95       	ret

Disassembly of section .text.LCD_display_text:

00000b48 <LCD_display_text>:
/*
* Given a string pointer (char array) this method will
* print that text to the display of the LCD
*/
void LCD_display_text(char *str)
{
 b48:	cf 93       	push	r28
 b4a:	df 93       	push	r29
 b4c:	ec 01       	movw	r28, r24
	// Going until the value in the string pointer is 0
	while (*str) {
 b4e:	03 c0       	rjmp	.+6      	; 0xb56 <LCD_display_text+0xe>
		// Moving the string pointer by one up
		lcd_write_char(*str++);
 b50:	21 96       	adiw	r28, 0x01	; 1
 b52:	0e 94 54 05 	call	0xaa8	; 0xaa8 <lcd_write_char>
* print that text to the display of the LCD
*/
void LCD_display_text(char *str)
{
	// Going until the value in the string pointer is 0
	while (*str) {
 b56:	88 81       	ld	r24, Y
 b58:	81 11       	cpse	r24, r1
 b5a:	fa cf       	rjmp	.-12     	; 0xb50 <LCD_display_text+0x8>
		// Moving the string pointer by one up
		lcd_write_char(*str++);
	}
}
 b5c:	df 91       	pop	r29
 b5e:	cf 91       	pop	r28
 b60:	08 95       	ret

Disassembly of section .text.LCD_set_cursor:

00000bda <LCD_set_cursor>:
*/
void LCD_set_cursor(int position)
{
	// Bit 8 should be 1 to change cursor
	char command = (position | (1<<7));
	lcd_write_command(command);
 bda:	80 68       	ori	r24, 0x80	; 128
 bdc:	0e 94 66 05 	call	0xacc	; 0xacc <lcd_write_command>
 be0:	08 95       	ret

Disassembly of section .text.__vector_8:

0000078e <__vector_8>:
int currentDistance = 0;

char ticksOnTrigger = 0;

ISR ( INT7_vect )
{	
 78e:	1f 92       	push	r1
 790:	0f 92       	push	r0
 792:	0f b6       	in	r0, 0x3f	; 63
 794:	0f 92       	push	r0
 796:	11 24       	eor	r1, r1
 798:	0b b6       	in	r0, 0x3b	; 59
 79a:	0f 92       	push	r0
 79c:	2f 93       	push	r18
 79e:	3f 93       	push	r19
 7a0:	4f 93       	push	r20
 7a2:	5f 93       	push	r21
 7a4:	6f 93       	push	r22
 7a6:	7f 93       	push	r23
 7a8:	8f 93       	push	r24
 7aa:	9f 93       	push	r25
 7ac:	af 93       	push	r26
 7ae:	bf 93       	push	r27
 7b0:	ef 93       	push	r30
 7b2:	ff 93       	push	r31
	PORTD = PINE;
 7b4:	81 b1       	in	r24, 0x01	; 1
 7b6:	82 bb       	out	0x12, r24	; 18
	
	if( PINE == 0b10000000 )
 7b8:	81 b1       	in	r24, 0x01	; 1
 7ba:	80 38       	cpi	r24, 0x80	; 128
 7bc:	21 f4       	brne	.+8      	; 0x7c6 <__vector_8+0x38>
	{
		ticksOnTrigger = TCNT2;
 7be:	84 b5       	in	r24, 0x24	; 36
 7c0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ticksOnTrigger>
 7c4:	17 c0       	rjmp	.+46     	; 0x7f4 <__vector_8+0x66>
	}
	else
	{
		unsigned char diff = TCNT2 - ticksOnTrigger;	// Getting the difference
 7c6:	64 b5       	in	r22, 0x24	; 36
 7c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ticksOnTrigger>
 7cc:	68 1b       	sub	r22, r24
		
		currentDistance = ( diff * ( 32.0 / 58.0 ) );	// Setting DDRD to the value from the echo
 7ce:	70 e0       	ldi	r23, 0x00	; 0
 7d0:	80 e0       	ldi	r24, 0x00	; 0
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	0e 94 0f 04 	call	0x81e	; 0x81e <__floatsisf>
 7d8:	2b ec       	ldi	r18, 0xCB	; 203
 7da:	3d e3       	ldi	r19, 0x3D	; 61
 7dc:	4d e0       	ldi	r20, 0x0D	; 13
 7de:	5f e3       	ldi	r21, 0x3F	; 63
 7e0:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__mulsf3>
 7e4:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fixsfsi>
 7e8:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 7ec:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
				
		
		ticksOnTrigger = 0; // resetting ticksOnTrigger
 7f0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ticksOnTrigger>
	}
}
 7f4:	ff 91       	pop	r31
 7f6:	ef 91       	pop	r30
 7f8:	bf 91       	pop	r27
 7fa:	af 91       	pop	r26
 7fc:	9f 91       	pop	r25
 7fe:	8f 91       	pop	r24
 800:	7f 91       	pop	r23
 802:	6f 91       	pop	r22
 804:	5f 91       	pop	r21
 806:	4f 91       	pop	r20
 808:	3f 91       	pop	r19
 80a:	2f 91       	pop	r18
 80c:	0f 90       	pop	r0
 80e:	0b be       	out	0x3b, r0	; 59
 810:	0f 90       	pop	r0
 812:	0f be       	out	0x3f, r0	; 63
 814:	0f 90       	pop	r0
 816:	1f 90       	pop	r1
 818:	18 95       	reti

Disassembly of section .text.__vector_10:

00000b62 <__vector_10>:

ISR ( TIMER2_OVF_vect )
{	
 b62:	1f 92       	push	r1
 b64:	0f 92       	push	r0
 b66:	0f b6       	in	r0, 0x3f	; 63
 b68:	0f 92       	push	r0
 b6a:	11 24       	eor	r1, r1
	TCNT2 = 0; // Resetting timer
 b6c:	14 bc       	out	0x24, r1	; 36
}
 b6e:	0f 90       	pop	r0
 b70:	0f be       	out	0x3f, r0	; 63
 b72:	0f 90       	pop	r0
 b74:	1f 90       	pop	r1
 b76:	18 95       	reti

Disassembly of section .text.initTimer:

00000b78 <initTimer>:
	return 1;
}

void initTimer()
{
	TCNT2 = 0;
 b78:	14 bc       	out	0x24, r1	; 36
	TIMSK |= 0b01000000;
 b7a:	87 b7       	in	r24, 0x37	; 55
 b7c:	80 64       	ori	r24, 0x40	; 64
 b7e:	87 bf       	out	0x37, r24	; 55
	TCCR2 = 0b00001100;
 b80:	8c e0       	ldi	r24, 0x0C	; 12
 b82:	85 bd       	out	0x25, r24	; 37
	sei();
 b84:	78 94       	sei
 b86:	08 95       	ret

Disassembly of section .text.main:

000006d4 <main>:
}

void initTimer();

int main(void)
{	
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	cd b7       	in	r28, 0x3d	; 61
 6da:	de b7       	in	r29, 0x3e	; 62
 6dc:	2d 97       	sbiw	r28, 0x0d	; 13
 6de:	0f b6       	in	r0, 0x3f	; 63
 6e0:	f8 94       	cli
 6e2:	de bf       	out	0x3e, r29	; 62
 6e4:	0f be       	out	0x3f, r0	; 63
 6e6:	cd bf       	out	0x3d, r28	; 61
 6e8:	2f ef       	ldi	r18, 0xFF	; 255
 6ea:	84 e3       	ldi	r24, 0x34	; 52
 6ec:	9c e0       	ldi	r25, 0x0C	; 12
 6ee:	21 50       	subi	r18, 0x01	; 1
 6f0:	80 40       	sbci	r24, 0x00	; 0
 6f2:	90 40       	sbci	r25, 0x00	; 0
 6f4:	e1 f7       	brne	.-8      	; 0x6ee <main+0x1a>
 6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <main+0x24>
 6f8:	00 00       	nop
	_delay_ms(500);	
	
	// Init I/O
	DDRD = 0xFF;			// Port D to output
 6fa:	8f ef       	ldi	r24, 0xFF	; 255
 6fc:	81 bb       	out	0x11, r24	; 17

	DDRE = 0b00001111;		// PORTE(7:4) input, PORTE(3:0) output
 6fe:	8f e0       	ldi	r24, 0x0F	; 15
 700:	82 b9       	out	0x02, r24	; 2

	// Init Interrupt hardware
	EICRB |= 0x40;			// ISC7 Rising edge
 702:	8a b7       	in	r24, 0x3a	; 58
 704:	80 64       	ori	r24, 0x40	; 64
 706:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= 0x80;			// Enable INT7
 708:	89 b7       	in	r24, 0x39	; 57
 70a:	80 68       	ori	r24, 0x80	; 128
 70c:	89 bf       	out	0x39, r24	; 57
		
	initTimer();
 70e:	0e 94 bc 05 	call	0xb78	; 0xb78 <initTimer>
	
	// Initing the LCD module
	LCD_init();
 712:	0e 94 89 05 	call	0xb12	; 0xb12 <LCD_init>
 716:	2f ef       	ldi	r18, 0xFF	; 255
 718:	8e e9       	ldi	r24, 0x9E	; 158
 71a:	94 e2       	ldi	r25, 0x24	; 36
 71c:	21 50       	subi	r18, 0x01	; 1
 71e:	80 40       	sbci	r24, 0x00	; 0
 720:	90 40       	sbci	r25, 0x00	; 0
 722:	e1 f7       	brne	.-8      	; 0x71c <main+0x48>
 724:	00 c0       	rjmp	.+0      	; 0x726 <main+0x52>
 726:	00 00       	nop
	
	_delay_ms(1500);
					
    while (1) {		
		PORTE |= (1 << TRIGGER_PIN);
 728:	83 b1       	in	r24, 0x03	; 3
 72a:	81 60       	ori	r24, 0x01	; 1
 72c:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 72e:	2a e1       	ldi	r18, 0x1A	; 26
 730:	2a 95       	dec	r18
 732:	f1 f7       	brne	.-4      	; 0x730 <main+0x5c>
 734:	00 c0       	rjmp	.+0      	; 0x736 <main+0x62>
		
		_delay_us(10);
		
		PORTE &= ~(1 << TRIGGER_PIN);
 736:	83 b1       	in	r24, 0x03	; 3
 738:	8e 7f       	andi	r24, 0xFE	; 254
 73a:	83 b9       	out	0x03, r24	; 3
		
		char string[13];
		
		// Writing distance to LCD
		sprintf(string, "%d cm   ", currentDistance);
 73c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
 740:	8f 93       	push	r24
 742:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 746:	8f 93       	push	r24
 748:	8a ee       	ldi	r24, 0xEA	; 234
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	a0 e0       	ldi	r26, 0x00	; 0
 74e:	af 93       	push	r26
 750:	9f 93       	push	r25
 752:	8f 93       	push	r24
 754:	8e 01       	movw	r16, r28
 756:	0f 5f       	subi	r16, 0xFF	; 255
 758:	1f 4f       	sbci	r17, 0xFF	; 255
 75a:	1f 93       	push	r17
 75c:	0f 93       	push	r16
 75e:	0e 94 86 04 	call	0x90c	; 0x90c <sprintf>
		LCD_set_cursor(0);
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 ed 05 	call	0xbda	; 0xbda <LCD_set_cursor>
		LCD_display_text(string);
 76a:	c8 01       	movw	r24, r16
 76c:	0e 94 a4 05 	call	0xb48	; 0xb48 <LCD_display_text>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 770:	8f ef       	ldi	r24, 0xFF	; 255
 772:	99 e6       	ldi	r25, 0x69	; 105
 774:	28 e1       	ldi	r18, 0x18	; 24
 776:	81 50       	subi	r24, 0x01	; 1
 778:	90 40       	sbci	r25, 0x00	; 0
 77a:	20 40       	sbci	r18, 0x00	; 0
 77c:	e1 f7       	brne	.-8      	; 0x776 <main+0xa2>
 77e:	00 c0       	rjmp	.+0      	; 0x780 <main+0xac>
 780:	00 00       	nop
 782:	0f b6       	in	r0, 0x3f	; 63
 784:	f8 94       	cli
 786:	de bf       	out	0x3e, r29	; 62
 788:	0f be       	out	0x3f, r0	; 63
 78a:	cd bf       	out	0x3d, r28	; 61
 78c:	cd cf       	rjmp	.-102    	; 0x728 <main+0x54>

Disassembly of section .text.avrlibc.fplib:

00000b88 <__fixsfsi>:
 b88:	0e 94 b6 04 	call	0x96c	; 0x96c <__fixunssfsi>
 b8c:	68 94       	set
 b8e:	b1 11       	cpse	r27, r1
 b90:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__fp_szero>
 b94:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000096c <__fixunssfsi>:
 96c:	0e 94 ed 04 	call	0x9da	; 0x9da <__fp_splitA>
 970:	88 f0       	brcs	.+34     	; 0x994 <__fixunssfsi+0x28>
 972:	9f 57       	subi	r25, 0x7F	; 127
 974:	98 f0       	brcs	.+38     	; 0x99c <__fixunssfsi+0x30>
 976:	b9 2f       	mov	r27, r25
 978:	99 27       	eor	r25, r25
 97a:	b7 51       	subi	r27, 0x17	; 23
 97c:	b0 f0       	brcs	.+44     	; 0x9aa <__fixunssfsi+0x3e>
 97e:	e1 f0       	breq	.+56     	; 0x9b8 <__fixunssfsi+0x4c>
 980:	66 0f       	add	r22, r22
 982:	77 1f       	adc	r23, r23
 984:	88 1f       	adc	r24, r24
 986:	99 1f       	adc	r25, r25
 988:	1a f0       	brmi	.+6      	; 0x990 <__fixunssfsi+0x24>
 98a:	ba 95       	dec	r27
 98c:	c9 f7       	brne	.-14     	; 0x980 <__fixunssfsi+0x14>
 98e:	14 c0       	rjmp	.+40     	; 0x9b8 <__fixunssfsi+0x4c>
 990:	b1 30       	cpi	r27, 0x01	; 1
 992:	91 f0       	breq	.+36     	; 0x9b8 <__fixunssfsi+0x4c>
 994:	0e 94 cb 05 	call	0xb96	; 0xb96 <__fp_zero>
 998:	b1 e0       	ldi	r27, 0x01	; 1
 99a:	08 95       	ret
 99c:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__fp_zero>
 9a0:	67 2f       	mov	r22, r23
 9a2:	78 2f       	mov	r23, r24
 9a4:	88 27       	eor	r24, r24
 9a6:	b8 5f       	subi	r27, 0xF8	; 248
 9a8:	39 f0       	breq	.+14     	; 0x9b8 <__fixunssfsi+0x4c>
 9aa:	b9 3f       	cpi	r27, 0xF9	; 249
 9ac:	cc f3       	brlt	.-14     	; 0x9a0 <__fixunssfsi+0x34>
 9ae:	86 95       	lsr	r24
 9b0:	77 95       	ror	r23
 9b2:	67 95       	ror	r22
 9b4:	b3 95       	inc	r27
 9b6:	d9 f7       	brne	.-10     	; 0x9ae <__fixunssfsi+0x42>
 9b8:	3e f4       	brtc	.+14     	; 0x9c8 <__fixunssfsi+0x5c>
 9ba:	90 95       	com	r25
 9bc:	80 95       	com	r24
 9be:	70 95       	com	r23
 9c0:	61 95       	neg	r22
 9c2:	7f 4f       	sbci	r23, 0xFF	; 255
 9c4:	8f 4f       	sbci	r24, 0xFF	; 255
 9c6:	9f 4f       	sbci	r25, 0xFF	; 255
 9c8:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000081a <__floatunsisf>:
 81a:	e8 94       	clt
 81c:	09 c0       	rjmp	.+18     	; 0x830 <__floatsisf+0x12>

0000081e <__floatsisf>:
 81e:	97 fb       	bst	r25, 7
 820:	3e f4       	brtc	.+14     	; 0x830 <__floatsisf+0x12>
 822:	90 95       	com	r25
 824:	80 95       	com	r24
 826:	70 95       	com	r23
 828:	61 95       	neg	r22
 82a:	7f 4f       	sbci	r23, 0xFF	; 255
 82c:	8f 4f       	sbci	r24, 0xFF	; 255
 82e:	9f 4f       	sbci	r25, 0xFF	; 255
 830:	99 23       	and	r25, r25
 832:	a9 f0       	breq	.+42     	; 0x85e <__floatsisf+0x40>
 834:	f9 2f       	mov	r31, r25
 836:	96 e9       	ldi	r25, 0x96	; 150
 838:	bb 27       	eor	r27, r27
 83a:	93 95       	inc	r25
 83c:	f6 95       	lsr	r31
 83e:	87 95       	ror	r24
 840:	77 95       	ror	r23
 842:	67 95       	ror	r22
 844:	b7 95       	ror	r27
 846:	f1 11       	cpse	r31, r1
 848:	f8 cf       	rjmp	.-16     	; 0x83a <__floatsisf+0x1c>
 84a:	fa f4       	brpl	.+62     	; 0x88a <__floatsisf+0x6c>
 84c:	bb 0f       	add	r27, r27
 84e:	11 f4       	brne	.+4      	; 0x854 <__floatsisf+0x36>
 850:	60 ff       	sbrs	r22, 0
 852:	1b c0       	rjmp	.+54     	; 0x88a <__floatsisf+0x6c>
 854:	6f 5f       	subi	r22, 0xFF	; 255
 856:	7f 4f       	sbci	r23, 0xFF	; 255
 858:	8f 4f       	sbci	r24, 0xFF	; 255
 85a:	9f 4f       	sbci	r25, 0xFF	; 255
 85c:	16 c0       	rjmp	.+44     	; 0x88a <__floatsisf+0x6c>
 85e:	88 23       	and	r24, r24
 860:	11 f0       	breq	.+4      	; 0x866 <__floatsisf+0x48>
 862:	96 e9       	ldi	r25, 0x96	; 150
 864:	11 c0       	rjmp	.+34     	; 0x888 <__floatsisf+0x6a>
 866:	77 23       	and	r23, r23
 868:	21 f0       	breq	.+8      	; 0x872 <__floatsisf+0x54>
 86a:	9e e8       	ldi	r25, 0x8E	; 142
 86c:	87 2f       	mov	r24, r23
 86e:	76 2f       	mov	r23, r22
 870:	05 c0       	rjmp	.+10     	; 0x87c <__floatsisf+0x5e>
 872:	66 23       	and	r22, r22
 874:	71 f0       	breq	.+28     	; 0x892 <__floatsisf+0x74>
 876:	96 e8       	ldi	r25, 0x86	; 134
 878:	86 2f       	mov	r24, r22
 87a:	70 e0       	ldi	r23, 0x00	; 0
 87c:	60 e0       	ldi	r22, 0x00	; 0
 87e:	2a f0       	brmi	.+10     	; 0x88a <__floatsisf+0x6c>
 880:	9a 95       	dec	r25
 882:	66 0f       	add	r22, r22
 884:	77 1f       	adc	r23, r23
 886:	88 1f       	adc	r24, r24
 888:	da f7       	brpl	.-10     	; 0x880 <__floatsisf+0x62>
 88a:	88 0f       	add	r24, r24
 88c:	96 95       	lsr	r25
 88e:	87 95       	ror	r24
 890:	97 f9       	bld	r25, 7
 892:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000009ca <__fp_split3>:
 9ca:	57 fd       	sbrc	r21, 7
 9cc:	90 58       	subi	r25, 0x80	; 128
 9ce:	44 0f       	add	r20, r20
 9d0:	55 1f       	adc	r21, r21
 9d2:	59 f0       	breq	.+22     	; 0x9ea <__fp_splitA+0x10>
 9d4:	5f 3f       	cpi	r21, 0xFF	; 255
 9d6:	71 f0       	breq	.+28     	; 0x9f4 <__fp_splitA+0x1a>
 9d8:	47 95       	ror	r20

000009da <__fp_splitA>:
 9da:	88 0f       	add	r24, r24
 9dc:	97 fb       	bst	r25, 7
 9de:	99 1f       	adc	r25, r25
 9e0:	61 f0       	breq	.+24     	; 0x9fa <__fp_splitA+0x20>
 9e2:	9f 3f       	cpi	r25, 0xFF	; 255
 9e4:	79 f0       	breq	.+30     	; 0xa04 <__fp_splitA+0x2a>
 9e6:	87 95       	ror	r24
 9e8:	08 95       	ret
 9ea:	12 16       	cp	r1, r18
 9ec:	13 06       	cpc	r1, r19
 9ee:	14 06       	cpc	r1, r20
 9f0:	55 1f       	adc	r21, r21
 9f2:	f2 cf       	rjmp	.-28     	; 0x9d8 <__fp_split3+0xe>
 9f4:	46 95       	lsr	r20
 9f6:	f1 df       	rcall	.-30     	; 0x9da <__fp_splitA>
 9f8:	08 c0       	rjmp	.+16     	; 0xa0a <__fp_splitA+0x30>
 9fa:	16 16       	cp	r1, r22
 9fc:	17 06       	cpc	r1, r23
 9fe:	18 06       	cpc	r1, r24
 a00:	99 1f       	adc	r25, r25
 a02:	f1 cf       	rjmp	.-30     	; 0x9e6 <__fp_splitA+0xc>
 a04:	86 95       	lsr	r24
 a06:	71 05       	cpc	r23, r1
 a08:	61 05       	cpc	r22, r1
 a0a:	08 94       	sec
 a0c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000b96 <__fp_zero>:
 b96:	e8 94       	clt

00000b98 <__fp_szero>:
 b98:	bb 27       	eor	r27, r27
 b9a:	66 27       	eor	r22, r22
 b9c:	77 27       	eor	r23, r23
 b9e:	cb 01       	movw	r24, r22
 ba0:	97 f9       	bld	r25, 7
 ba2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000be2 <__mulsf3>:
 be2:	0e 94 a2 02 	call	0x544	; 0x544 <__mulsf3x>
 be6:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00000544 <__mulsf3x>:
 544:	0f c0       	rjmp	.+30     	; 0x564 <__mulsf3x+0x20>
 546:	0e 94 d2 05 	call	0xba4	; 0xba4 <__fp_pscA>
 54a:	38 f0       	brcs	.+14     	; 0x55a <__mulsf3x+0x16>
 54c:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__fp_pscB>
 550:	20 f0       	brcs	.+8      	; 0x55a <__mulsf3x+0x16>
 552:	95 23       	and	r25, r21
 554:	11 f0       	breq	.+4      	; 0x55a <__mulsf3x+0x16>
 556:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__fp_inf>
 55a:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__fp_nan>
 55e:	11 24       	eor	r1, r1
 560:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__fp_szero>
 564:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fp_split3>
 568:	70 f3       	brcs	.-36     	; 0x546 <__mulsf3x+0x2>

0000056a <__mulsf3_pse>:
 56a:	95 9f       	mul	r25, r21
 56c:	c1 f3       	breq	.-16     	; 0x55e <__mulsf3x+0x1a>
 56e:	95 0f       	add	r25, r21
 570:	50 e0       	ldi	r21, 0x00	; 0
 572:	55 1f       	adc	r21, r21
 574:	62 9f       	mul	r22, r18
 576:	f0 01       	movw	r30, r0
 578:	72 9f       	mul	r23, r18
 57a:	bb 27       	eor	r27, r27
 57c:	f0 0d       	add	r31, r0
 57e:	b1 1d       	adc	r27, r1
 580:	63 9f       	mul	r22, r19
 582:	aa 27       	eor	r26, r26
 584:	f0 0d       	add	r31, r0
 586:	b1 1d       	adc	r27, r1
 588:	aa 1f       	adc	r26, r26
 58a:	64 9f       	mul	r22, r20
 58c:	66 27       	eor	r22, r22
 58e:	b0 0d       	add	r27, r0
 590:	a1 1d       	adc	r26, r1
 592:	66 1f       	adc	r22, r22
 594:	82 9f       	mul	r24, r18
 596:	22 27       	eor	r18, r18
 598:	b0 0d       	add	r27, r0
 59a:	a1 1d       	adc	r26, r1
 59c:	62 1f       	adc	r22, r18
 59e:	73 9f       	mul	r23, r19
 5a0:	b0 0d       	add	r27, r0
 5a2:	a1 1d       	adc	r26, r1
 5a4:	62 1f       	adc	r22, r18
 5a6:	83 9f       	mul	r24, r19
 5a8:	a0 0d       	add	r26, r0
 5aa:	61 1d       	adc	r22, r1
 5ac:	22 1f       	adc	r18, r18
 5ae:	74 9f       	mul	r23, r20
 5b0:	33 27       	eor	r19, r19
 5b2:	a0 0d       	add	r26, r0
 5b4:	61 1d       	adc	r22, r1
 5b6:	23 1f       	adc	r18, r19
 5b8:	84 9f       	mul	r24, r20
 5ba:	60 0d       	add	r22, r0
 5bc:	21 1d       	adc	r18, r1
 5be:	82 2f       	mov	r24, r18
 5c0:	76 2f       	mov	r23, r22
 5c2:	6a 2f       	mov	r22, r26
 5c4:	11 24       	eor	r1, r1
 5c6:	9f 57       	subi	r25, 0x7F	; 127
 5c8:	50 40       	sbci	r21, 0x00	; 0
 5ca:	9a f0       	brmi	.+38     	; 0x5f2 <__mulsf3_pse+0x88>
 5cc:	f1 f0       	breq	.+60     	; 0x60a <__mulsf3_pse+0xa0>
 5ce:	88 23       	and	r24, r24
 5d0:	4a f0       	brmi	.+18     	; 0x5e4 <__mulsf3_pse+0x7a>
 5d2:	ee 0f       	add	r30, r30
 5d4:	ff 1f       	adc	r31, r31
 5d6:	bb 1f       	adc	r27, r27
 5d8:	66 1f       	adc	r22, r22
 5da:	77 1f       	adc	r23, r23
 5dc:	88 1f       	adc	r24, r24
 5de:	91 50       	subi	r25, 0x01	; 1
 5e0:	50 40       	sbci	r21, 0x00	; 0
 5e2:	a9 f7       	brne	.-22     	; 0x5ce <__mulsf3_pse+0x64>
 5e4:	9e 3f       	cpi	r25, 0xFE	; 254
 5e6:	51 05       	cpc	r21, r1
 5e8:	80 f0       	brcs	.+32     	; 0x60a <__mulsf3_pse+0xa0>
 5ea:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__fp_inf>
 5ee:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__fp_szero>
 5f2:	5f 3f       	cpi	r21, 0xFF	; 255
 5f4:	e4 f3       	brlt	.-8      	; 0x5ee <__mulsf3_pse+0x84>
 5f6:	98 3e       	cpi	r25, 0xE8	; 232
 5f8:	d4 f3       	brlt	.-12     	; 0x5ee <__mulsf3_pse+0x84>
 5fa:	86 95       	lsr	r24
 5fc:	77 95       	ror	r23
 5fe:	67 95       	ror	r22
 600:	b7 95       	ror	r27
 602:	f7 95       	ror	r31
 604:	e7 95       	ror	r30
 606:	9f 5f       	subi	r25, 0xFF	; 255
 608:	c1 f7       	brne	.-16     	; 0x5fa <__mulsf3_pse+0x90>
 60a:	fe 2b       	or	r31, r30
 60c:	88 0f       	add	r24, r24
 60e:	91 1d       	adc	r25, r1
 610:	96 95       	lsr	r25
 612:	87 95       	ror	r24
 614:	97 f9       	bld	r25, 7
 616:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000bce <__fp_inf>:
 bce:	97 f9       	bld	r25, 7
 bd0:	9f 67       	ori	r25, 0x7F	; 127
 bd2:	80 e8       	ldi	r24, 0x80	; 128
 bd4:	70 e0       	ldi	r23, 0x00	; 0
 bd6:	60 e0       	ldi	r22, 0x00	; 0
 bd8:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000bea <__fp_nan>:
 bea:	9f ef       	ldi	r25, 0xFF	; 255
 bec:	80 ec       	ldi	r24, 0xC0	; 192
 bee:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000ba4 <__fp_pscA>:
 ba4:	00 24       	eor	r0, r0
 ba6:	0a 94       	dec	r0
 ba8:	16 16       	cp	r1, r22
 baa:	17 06       	cpc	r1, r23
 bac:	18 06       	cpc	r1, r24
 bae:	09 06       	cpc	r0, r25
 bb0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000bb2 <__fp_pscB>:
 bb2:	00 24       	eor	r0, r0
 bb4:	0a 94       	dec	r0
 bb6:	12 16       	cp	r1, r18
 bb8:	13 06       	cpc	r1, r19
 bba:	14 06       	cpc	r1, r20
 bbc:	05 06       	cpc	r0, r21
 bbe:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000af0 <__fp_round>:
 af0:	09 2e       	mov	r0, r25
 af2:	03 94       	inc	r0
 af4:	00 0c       	add	r0, r0
 af6:	11 f4       	brne	.+4      	; 0xafc <__fp_round+0xc>
 af8:	88 23       	and	r24, r24
 afa:	52 f0       	brmi	.+20     	; 0xb10 <__fp_round+0x20>
 afc:	bb 0f       	add	r27, r27
 afe:	40 f4       	brcc	.+16     	; 0xb10 <__fp_round+0x20>
 b00:	bf 2b       	or	r27, r31
 b02:	11 f4       	brne	.+4      	; 0xb08 <__fp_round+0x18>
 b04:	60 ff       	sbrs	r22, 0
 b06:	04 c0       	rjmp	.+8      	; 0xb10 <__fp_round+0x20>
 b08:	6f 5f       	subi	r22, 0xFF	; 255
 b0a:	7f 4f       	sbci	r23, 0xFF	; 255
 b0c:	8f 4f       	sbci	r24, 0xFF	; 255
 b0e:	9f 4f       	sbci	r25, 0xFF	; 255
 b10:	08 95       	ret

Disassembly of section .text.avrlibc:

0000090c <sprintf>:
 90c:	0f 93       	push	r16
 90e:	1f 93       	push	r17
 910:	cf 93       	push	r28
 912:	df 93       	push	r29
 914:	cd b7       	in	r28, 0x3d	; 61
 916:	de b7       	in	r29, 0x3e	; 62
 918:	2f 97       	sbiw	r28, 0x0f	; 15
 91a:	0f b6       	in	r0, 0x3f	; 63
 91c:	f8 94       	cli
 91e:	de bf       	out	0x3e, r29	; 62
 920:	0f be       	out	0x3f, r0	; 63
 922:	cd bf       	out	0x3d, r28	; 61
 924:	0e 89       	ldd	r16, Y+22	; 0x16
 926:	1f 89       	ldd	r17, Y+23	; 0x17
 928:	86 e0       	ldi	r24, 0x06	; 6
 92a:	8d 83       	std	Y+5, r24	; 0x05
 92c:	1a 83       	std	Y+2, r17	; 0x02
 92e:	09 83       	std	Y+1, r16	; 0x01
 930:	8f ef       	ldi	r24, 0xFF	; 255
 932:	9f e7       	ldi	r25, 0x7F	; 127
 934:	9f 83       	std	Y+7, r25	; 0x07
 936:	8e 83       	std	Y+6, r24	; 0x06
 938:	9e 01       	movw	r18, r28
 93a:	25 5e       	subi	r18, 0xE5	; 229
 93c:	3f 4f       	sbci	r19, 0xFF	; 255
 93e:	48 8d       	ldd	r20, Y+24	; 0x18
 940:	59 8d       	ldd	r21, Y+25	; 0x19
 942:	6a 8d       	ldd	r22, Y+26	; 0x1a
 944:	ce 01       	movw	r24, r28
 946:	01 96       	adiw	r24, 0x01	; 1
 948:	0e 94 7a 00 	call	0xf4	; 0xf4 <vfprintf>
 94c:	e8 85       	ldd	r30, Y+8	; 0x08
 94e:	f9 85       	ldd	r31, Y+9	; 0x09
 950:	e0 0f       	add	r30, r16
 952:	f1 1f       	adc	r31, r17
 954:	10 82       	st	Z, r1
 956:	2f 96       	adiw	r28, 0x0f	; 15
 958:	0f b6       	in	r0, 0x3f	; 63
 95a:	f8 94       	cli
 95c:	de bf       	out	0x3e, r29	; 62
 95e:	0f be       	out	0x3f, r0	; 63
 960:	cd bf       	out	0x3d, r28	; 61
 962:	df 91       	pop	r29
 964:	cf 91       	pop	r28
 966:	1f 91       	pop	r17
 968:	0f 91       	pop	r16
 96a:	08 95       	ret

Disassembly of section .text.avrlibc:

000000f4 <vfprintf>:
  f4:	2f 92       	push	r2
  f6:	3f 92       	push	r3
  f8:	4f 92       	push	r4
  fa:	6f 92       	push	r6
  fc:	7f 92       	push	r7
  fe:	8f 92       	push	r8
 100:	9f 92       	push	r9
 102:	af 92       	push	r10
 104:	bf 92       	push	r11
 106:	cf 92       	push	r12
 108:	df 92       	push	r13
 10a:	ef 92       	push	r14
 10c:	ff 92       	push	r15
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	62 97       	sbiw	r28, 0x12	; 18
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
 126:	6c 01       	movw	r12, r24
 128:	3a 01       	movw	r6, r20
 12a:	86 2e       	mov	r8, r22
 12c:	79 01       	movw	r14, r18
 12e:	fc 01       	movw	r30, r24
 130:	10 86       	std	Z+8, r1	; 0x08
 132:	17 82       	std	Z+7, r1	; 0x07
 134:	84 81       	ldd	r24, Z+4	; 0x04
 136:	81 ff       	sbrs	r24, 1
 138:	eb c1       	rjmp	.+982    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 13a:	9e 01       	movw	r18, r28
 13c:	2f 5f       	subi	r18, 0xFF	; 255
 13e:	3f 4f       	sbci	r19, 0xFF	; 255
 140:	3d 87       	std	Y+13, r19	; 0x0d
 142:	2c 87       	std	Y+12, r18	; 0x0c
 144:	c9 01       	movw	r24, r18
 146:	a0 e8       	ldi	r26, 0x80	; 128
 148:	88 8b       	std	Y+16, r24	; 0x10
 14a:	99 8b       	std	Y+17, r25	; 0x11
 14c:	aa 8b       	std	Y+18, r26	; 0x12
 14e:	9f e3       	ldi	r25, 0x3F	; 63
 150:	99 2e       	mov	r9, r25
 152:	f3 01       	movw	r30, r6
 154:	58 2d       	mov	r21, r8
 156:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__xload_1>
 15a:	86 2f       	mov	r24, r22
 15c:	66 23       	and	r22, r22
 15e:	09 f4       	brne	.+2      	; 0x162 <vfprintf+0x6e>
 160:	d3 c1       	rjmp	.+934    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 162:	48 2d       	mov	r20, r8
 164:	93 01       	movw	r18, r6
 166:	2f 5f       	subi	r18, 0xFF	; 255
 168:	3f 4f       	sbci	r19, 0xFF	; 255
 16a:	4f 4f       	sbci	r20, 0xFF	; 255
 16c:	65 32       	cpi	r22, 0x25	; 37
 16e:	19 f0       	breq	.+6      	; 0x176 <vfprintf+0x82>
 170:	39 01       	movw	r6, r18
 172:	84 2e       	mov	r8, r20
 174:	0b c0       	rjmp	.+22     	; 0x18c <vfprintf+0x98>
 176:	f9 01       	movw	r30, r18
 178:	54 2f       	mov	r21, r20
 17a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__xload_1>
 17e:	86 2f       	mov	r24, r22
 180:	92 e0       	ldi	r25, 0x02	; 2
 182:	69 0e       	add	r6, r25
 184:	71 1c       	adc	r7, r1
 186:	81 1c       	adc	r8, r1
 188:	65 32       	cpi	r22, 0x25	; 37
 18a:	29 f4       	brne	.+10     	; 0x196 <vfprintf+0xa2>
 18c:	b6 01       	movw	r22, r12
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 4a 04 	call	0x894	; 0x894 <fputc>
 194:	de cf       	rjmp	.-68     	; 0x152 <vfprintf+0x5e>
 196:	b1 2c       	mov	r11, r1
 198:	00 e0       	ldi	r16, 0x00	; 0
 19a:	10 e0       	ldi	r17, 0x00	; 0
 19c:	10 32       	cpi	r17, 0x20	; 32
 19e:	a0 f4       	brcc	.+40     	; 0x1c8 <vfprintf+0xd4>
 1a0:	8b 32       	cpi	r24, 0x2B	; 43
 1a2:	69 f0       	breq	.+26     	; 0x1be <vfprintf+0xca>
 1a4:	30 f4       	brcc	.+12     	; 0x1b2 <vfprintf+0xbe>
 1a6:	80 32       	cpi	r24, 0x20	; 32
 1a8:	59 f0       	breq	.+22     	; 0x1c0 <vfprintf+0xcc>
 1aa:	83 32       	cpi	r24, 0x23	; 35
 1ac:	69 f4       	brne	.+26     	; 0x1c8 <vfprintf+0xd4>
 1ae:	10 61       	ori	r17, 0x10	; 16
 1b0:	2c c0       	rjmp	.+88     	; 0x20a <vfprintf+0x116>
 1b2:	8d 32       	cpi	r24, 0x2D	; 45
 1b4:	39 f0       	breq	.+14     	; 0x1c4 <vfprintf+0xd0>
 1b6:	80 33       	cpi	r24, 0x30	; 48
 1b8:	39 f4       	brne	.+14     	; 0x1c8 <vfprintf+0xd4>
 1ba:	11 60       	ori	r17, 0x01	; 1
 1bc:	26 c0       	rjmp	.+76     	; 0x20a <vfprintf+0x116>
 1be:	12 60       	ori	r17, 0x02	; 2
 1c0:	14 60       	ori	r17, 0x04	; 4
 1c2:	23 c0       	rjmp	.+70     	; 0x20a <vfprintf+0x116>
 1c4:	18 60       	ori	r17, 0x08	; 8
 1c6:	21 c0       	rjmp	.+66     	; 0x20a <vfprintf+0x116>
 1c8:	17 fd       	sbrc	r17, 7
 1ca:	2a c0       	rjmp	.+84     	; 0x220 <vfprintf+0x12c>
 1cc:	90 ed       	ldi	r25, 0xD0	; 208
 1ce:	98 0f       	add	r25, r24
 1d0:	9a 30       	cpi	r25, 0x0A	; 10
 1d2:	78 f4       	brcc	.+30     	; 0x1f2 <vfprintf+0xfe>
 1d4:	16 ff       	sbrs	r17, 6
 1d6:	06 c0       	rjmp	.+12     	; 0x1e4 <vfprintf+0xf0>
 1d8:	aa e0       	ldi	r26, 0x0A	; 10
 1da:	ba 9e       	mul	r11, r26
 1dc:	90 0d       	add	r25, r0
 1de:	11 24       	eor	r1, r1
 1e0:	b9 2e       	mov	r11, r25
 1e2:	13 c0       	rjmp	.+38     	; 0x20a <vfprintf+0x116>
 1e4:	ea e0       	ldi	r30, 0x0A	; 10
 1e6:	0e 9f       	mul	r16, r30
 1e8:	90 0d       	add	r25, r0
 1ea:	11 24       	eor	r1, r1
 1ec:	09 2f       	mov	r16, r25
 1ee:	10 62       	ori	r17, 0x20	; 32
 1f0:	0c c0       	rjmp	.+24     	; 0x20a <vfprintf+0x116>
 1f2:	8e 32       	cpi	r24, 0x2E	; 46
 1f4:	21 f4       	brne	.+8      	; 0x1fe <vfprintf+0x10a>
 1f6:	16 fd       	sbrc	r17, 6
 1f8:	87 c1       	rjmp	.+782    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 1fa:	10 64       	ori	r17, 0x40	; 64
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <vfprintf+0x116>
 1fe:	8c 36       	cpi	r24, 0x6C	; 108
 200:	11 f4       	brne	.+4      	; 0x206 <vfprintf+0x112>
 202:	10 68       	ori	r17, 0x80	; 128
 204:	02 c0       	rjmp	.+4      	; 0x20a <vfprintf+0x116>
 206:	88 36       	cpi	r24, 0x68	; 104
 208:	59 f4       	brne	.+22     	; 0x220 <vfprintf+0x12c>
 20a:	f3 01       	movw	r30, r6
 20c:	58 2d       	mov	r21, r8
 20e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__xload_1>
 212:	86 2f       	mov	r24, r22
 214:	ff ef       	ldi	r31, 0xFF	; 255
 216:	6f 1a       	sub	r6, r31
 218:	7f 0a       	sbc	r7, r31
 21a:	8f 0a       	sbc	r8, r31
 21c:	61 11       	cpse	r22, r1
 21e:	be cf       	rjmp	.-132    	; 0x19c <vfprintf+0xa8>
 220:	98 2f       	mov	r25, r24
 222:	9f 7d       	andi	r25, 0xDF	; 223
 224:	95 54       	subi	r25, 0x45	; 69
 226:	93 30       	cpi	r25, 0x03	; 3
 228:	28 f4       	brcc	.+10     	; 0x234 <vfprintf+0x140>
 22a:	24 e0       	ldi	r18, 0x04	; 4
 22c:	e2 0e       	add	r14, r18
 22e:	f1 1c       	adc	r15, r1
 230:	99 82       	std	Y+1, r9	; 0x01
 232:	0f c0       	rjmp	.+30     	; 0x252 <vfprintf+0x15e>
 234:	83 36       	cpi	r24, 0x63	; 99
 236:	31 f0       	breq	.+12     	; 0x244 <vfprintf+0x150>
 238:	83 37       	cpi	r24, 0x73	; 115
 23a:	91 f0       	breq	.+36     	; 0x260 <vfprintf+0x16c>
 23c:	83 35       	cpi	r24, 0x53	; 83
 23e:	09 f0       	breq	.+2      	; 0x242 <vfprintf+0x14e>
 240:	64 c0       	rjmp	.+200    	; 0x30a <vfprintf+0x216>
 242:	27 c0       	rjmp	.+78     	; 0x292 <vfprintf+0x19e>
 244:	f7 01       	movw	r30, r14
 246:	80 81       	ld	r24, Z
 248:	89 83       	std	Y+1, r24	; 0x01
 24a:	97 01       	movw	r18, r14
 24c:	2e 5f       	subi	r18, 0xFE	; 254
 24e:	3f 4f       	sbci	r19, 0xFF	; 255
 250:	79 01       	movw	r14, r18
 252:	28 88       	ldd	r2, Y+16	; 0x10
 254:	39 88       	ldd	r3, Y+17	; 0x11
 256:	4a 88       	ldd	r4, Y+18	; 0x12
 258:	aa 24       	eor	r10, r10
 25a:	a3 94       	inc	r10
 25c:	b1 2c       	mov	r11, r1
 25e:	17 c0       	rjmp	.+46     	; 0x28e <vfprintf+0x19a>
 260:	a7 01       	movw	r20, r14
 262:	4d 5f       	subi	r20, 0xFD	; 253
 264:	5f 4f       	sbci	r21, 0xFF	; 255
 266:	5f 87       	std	Y+15, r21	; 0x0f
 268:	4e 87       	std	Y+14, r20	; 0x0e
 26a:	f7 01       	movw	r30, r14
 26c:	20 80       	ld	r2, Z
 26e:	31 80       	ldd	r3, Z+1	; 0x01
 270:	42 80       	ldd	r4, Z+2	; 0x02
 272:	16 ff       	sbrs	r17, 6
 274:	03 c0       	rjmp	.+6      	; 0x27c <vfprintf+0x188>
 276:	4b 2d       	mov	r20, r11
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <vfprintf+0x18c>
 27c:	4f ef       	ldi	r20, 0xFF	; 255
 27e:	5f ef       	ldi	r21, 0xFF	; 255
 280:	84 2d       	mov	r24, r4
 282:	b1 01       	movw	r22, r2
 284:	0e 94 25 05 	call	0xa4a	; 0xa4a <strnlen>
 288:	5c 01       	movw	r10, r24
 28a:	ee 84       	ldd	r14, Y+14	; 0x0e
 28c:	ff 84       	ldd	r15, Y+15	; 0x0f
 28e:	1f 77       	andi	r17, 0x7F	; 127
 290:	18 c0       	rjmp	.+48     	; 0x2c2 <vfprintf+0x1ce>
 292:	97 01       	movw	r18, r14
 294:	2d 5f       	subi	r18, 0xFD	; 253
 296:	3f 4f       	sbci	r19, 0xFF	; 255
 298:	3f 87       	std	Y+15, r19	; 0x0f
 29a:	2e 87       	std	Y+14, r18	; 0x0e
 29c:	f7 01       	movw	r30, r14
 29e:	20 80       	ld	r2, Z
 2a0:	31 80       	ldd	r3, Z+1	; 0x01
 2a2:	42 80       	ldd	r4, Z+2	; 0x02
 2a4:	16 ff       	sbrs	r17, 6
 2a6:	03 c0       	rjmp	.+6      	; 0x2ae <vfprintf+0x1ba>
 2a8:	4b 2d       	mov	r20, r11
 2aa:	50 e0       	ldi	r21, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <vfprintf+0x1be>
 2ae:	4f ef       	ldi	r20, 0xFF	; 255
 2b0:	5f ef       	ldi	r21, 0xFF	; 255
 2b2:	84 2d       	mov	r24, r4
 2b4:	b1 01       	movw	r22, r2
 2b6:	0e 94 25 05 	call	0xa4a	; 0xa4a <strnlen>
 2ba:	5c 01       	movw	r10, r24
 2bc:	10 68       	ori	r17, 0x80	; 128
 2be:	ee 84       	ldd	r14, Y+14	; 0x0e
 2c0:	ff 84       	ldd	r15, Y+15	; 0x0f
 2c2:	13 fd       	sbrc	r17, 3
 2c4:	1e c0       	rjmp	.+60     	; 0x302 <vfprintf+0x20e>
 2c6:	80 2f       	mov	r24, r16
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	a8 16       	cp	r10, r24
 2cc:	b9 06       	cpc	r11, r25
 2ce:	c8 f4       	brcc	.+50     	; 0x302 <vfprintf+0x20e>
 2d0:	b6 01       	movw	r22, r12
 2d2:	80 e2       	ldi	r24, 0x20	; 32
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 4a 04 	call	0x894	; 0x894 <fputc>
 2da:	01 50       	subi	r16, 0x01	; 1
 2dc:	f4 cf       	rjmp	.-24     	; 0x2c6 <vfprintf+0x1d2>
 2de:	f1 01       	movw	r30, r2
 2e0:	54 2d       	mov	r21, r4
 2e2:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__xload_1>
 2e6:	86 2f       	mov	r24, r22
 2e8:	ff ef       	ldi	r31, 0xFF	; 255
 2ea:	2f 1a       	sub	r2, r31
 2ec:	3f 0a       	sbc	r3, r31
 2ee:	4f 0a       	sbc	r4, r31
 2f0:	b6 01       	movw	r22, r12
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 4a 04 	call	0x894	; 0x894 <fputc>
 2f8:	01 11       	cpse	r16, r1
 2fa:	01 50       	subi	r16, 0x01	; 1
 2fc:	21 e0       	ldi	r18, 0x01	; 1
 2fe:	a2 1a       	sub	r10, r18
 300:	b1 08       	sbc	r11, r1
 302:	a1 14       	cp	r10, r1
 304:	b1 04       	cpc	r11, r1
 306:	59 f7       	brne	.-42     	; 0x2de <vfprintf+0x1ea>
 308:	f5 c0       	rjmp	.+490    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 30a:	84 36       	cpi	r24, 0x64	; 100
 30c:	11 f0       	breq	.+4      	; 0x312 <vfprintf+0x21e>
 30e:	89 36       	cpi	r24, 0x69	; 105
 310:	71 f5       	brne	.+92     	; 0x36e <vfprintf+0x27a>
 312:	f7 01       	movw	r30, r14
 314:	17 ff       	sbrs	r17, 7
 316:	08 c0       	rjmp	.+16     	; 0x328 <vfprintf+0x234>
 318:	60 81       	ld	r22, Z
 31a:	71 81       	ldd	r23, Z+1	; 0x01
 31c:	82 81       	ldd	r24, Z+2	; 0x02
 31e:	93 81       	ldd	r25, Z+3	; 0x03
 320:	97 01       	movw	r18, r14
 322:	2c 5f       	subi	r18, 0xFC	; 252
 324:	3f 4f       	sbci	r19, 0xFF	; 255
 326:	09 c0       	rjmp	.+18     	; 0x33a <vfprintf+0x246>
 328:	60 81       	ld	r22, Z
 32a:	71 81       	ldd	r23, Z+1	; 0x01
 32c:	07 2e       	mov	r0, r23
 32e:	00 0c       	add	r0, r0
 330:	88 0b       	sbc	r24, r24
 332:	99 0b       	sbc	r25, r25
 334:	97 01       	movw	r18, r14
 336:	2e 5f       	subi	r18, 0xFE	; 254
 338:	3f 4f       	sbci	r19, 0xFF	; 255
 33a:	79 01       	movw	r14, r18
 33c:	1f 76       	andi	r17, 0x6F	; 111
 33e:	31 2e       	mov	r3, r17
 340:	97 ff       	sbrs	r25, 7
 342:	0a c0       	rjmp	.+20     	; 0x358 <vfprintf+0x264>
 344:	90 95       	com	r25
 346:	80 95       	com	r24
 348:	70 95       	com	r23
 34a:	61 95       	neg	r22
 34c:	7f 4f       	sbci	r23, 0xFF	; 255
 34e:	8f 4f       	sbci	r24, 0xFF	; 255
 350:	9f 4f       	sbci	r25, 0xFF	; 255
 352:	31 2f       	mov	r19, r17
 354:	30 68       	ori	r19, 0x80	; 128
 356:	33 2e       	mov	r3, r19
 358:	2a e0       	ldi	r18, 0x0A	; 10
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	ae 01       	movw	r20, r28
 35e:	4f 5f       	subi	r20, 0xFF	; 255
 360:	5f 4f       	sbci	r21, 0xFF	; 255
 362:	0e 94 0c 03 	call	0x618	; 0x618 <__ultoa_invert>
 366:	48 2e       	mov	r4, r24
 368:	4c 85       	ldd	r20, Y+12	; 0x0c
 36a:	44 1a       	sub	r4, r20
 36c:	4a c0       	rjmp	.+148    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 36e:	85 37       	cpi	r24, 0x75	; 117
 370:	29 f4       	brne	.+10     	; 0x37c <vfprintf+0x288>
 372:	1f 7e       	andi	r17, 0xEF	; 239
 374:	a1 2e       	mov	r10, r17
 376:	2a e0       	ldi	r18, 0x0A	; 10
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	25 c0       	rjmp	.+74     	; 0x3c6 <vfprintf+0x2d2>
 37c:	51 2f       	mov	r21, r17
 37e:	59 7f       	andi	r21, 0xF9	; 249
 380:	a5 2e       	mov	r10, r21
 382:	8f 36       	cpi	r24, 0x6F	; 111
 384:	c1 f0       	breq	.+48     	; 0x3b6 <vfprintf+0x2c2>
 386:	18 f4       	brcc	.+6      	; 0x38e <vfprintf+0x29a>
 388:	88 35       	cpi	r24, 0x58	; 88
 38a:	79 f0       	breq	.+30     	; 0x3aa <vfprintf+0x2b6>
 38c:	bd c0       	rjmp	.+378    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 38e:	80 37       	cpi	r24, 0x70	; 112
 390:	19 f0       	breq	.+6      	; 0x398 <vfprintf+0x2a4>
 392:	88 37       	cpi	r24, 0x78	; 120
 394:	21 f0       	breq	.+8      	; 0x39e <vfprintf+0x2aa>
 396:	b8 c0       	rjmp	.+368    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 398:	85 2f       	mov	r24, r21
 39a:	80 61       	ori	r24, 0x10	; 16
 39c:	a8 2e       	mov	r10, r24
 39e:	a4 fe       	sbrs	r10, 4
 3a0:	0d c0       	rjmp	.+26     	; 0x3bc <vfprintf+0x2c8>
 3a2:	9a 2d       	mov	r25, r10
 3a4:	94 60       	ori	r25, 0x04	; 4
 3a6:	a9 2e       	mov	r10, r25
 3a8:	09 c0       	rjmp	.+18     	; 0x3bc <vfprintf+0x2c8>
 3aa:	14 ff       	sbrs	r17, 4
 3ac:	0a c0       	rjmp	.+20     	; 0x3c2 <vfprintf+0x2ce>
 3ae:	a5 2f       	mov	r26, r21
 3b0:	a6 60       	ori	r26, 0x06	; 6
 3b2:	aa 2e       	mov	r10, r26
 3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <vfprintf+0x2ce>
 3b6:	28 e0       	ldi	r18, 0x08	; 8
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	05 c0       	rjmp	.+10     	; 0x3c6 <vfprintf+0x2d2>
 3bc:	20 e1       	ldi	r18, 0x10	; 16
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <vfprintf+0x2d2>
 3c2:	20 e1       	ldi	r18, 0x10	; 16
 3c4:	32 e0       	ldi	r19, 0x02	; 2
 3c6:	f7 01       	movw	r30, r14
 3c8:	a7 fe       	sbrs	r10, 7
 3ca:	08 c0       	rjmp	.+16     	; 0x3dc <vfprintf+0x2e8>
 3cc:	60 81       	ld	r22, Z
 3ce:	71 81       	ldd	r23, Z+1	; 0x01
 3d0:	82 81       	ldd	r24, Z+2	; 0x02
 3d2:	93 81       	ldd	r25, Z+3	; 0x03
 3d4:	a7 01       	movw	r20, r14
 3d6:	4c 5f       	subi	r20, 0xFC	; 252
 3d8:	5f 4f       	sbci	r21, 0xFF	; 255
 3da:	07 c0       	rjmp	.+14     	; 0x3ea <vfprintf+0x2f6>
 3dc:	60 81       	ld	r22, Z
 3de:	71 81       	ldd	r23, Z+1	; 0x01
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	a7 01       	movw	r20, r14
 3e6:	4e 5f       	subi	r20, 0xFE	; 254
 3e8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ea:	7a 01       	movw	r14, r20
 3ec:	ae 01       	movw	r20, r28
 3ee:	4f 5f       	subi	r20, 0xFF	; 255
 3f0:	5f 4f       	sbci	r21, 0xFF	; 255
 3f2:	0e 94 0c 03 	call	0x618	; 0x618 <__ultoa_invert>
 3f6:	48 2e       	mov	r4, r24
 3f8:	5c 85       	ldd	r21, Y+12	; 0x0c
 3fa:	45 1a       	sub	r4, r21
 3fc:	8a 2d       	mov	r24, r10
 3fe:	8f 77       	andi	r24, 0x7F	; 127
 400:	38 2e       	mov	r3, r24
 402:	36 fe       	sbrs	r3, 6
 404:	0d c0       	rjmp	.+26     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 406:	93 2d       	mov	r25, r3
 408:	9e 7f       	andi	r25, 0xFE	; 254
 40a:	a9 2e       	mov	r10, r25
 40c:	4b 14       	cp	r4, r11
 40e:	58 f4       	brcc	.+22     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 410:	34 fe       	sbrs	r3, 4
 412:	0b c0       	rjmp	.+22     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 414:	32 fc       	sbrc	r3, 2
 416:	09 c0       	rjmp	.+18     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 418:	a3 2d       	mov	r26, r3
 41a:	ae 7e       	andi	r26, 0xEE	; 238
 41c:	aa 2e       	mov	r10, r26
 41e:	05 c0       	rjmp	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 420:	14 2d       	mov	r17, r4
 422:	a3 2c       	mov	r10, r3
 424:	03 c0       	rjmp	.+6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 426:	14 2d       	mov	r17, r4
 428:	01 c0       	rjmp	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42a:	1b 2d       	mov	r17, r11
 42c:	a4 fe       	sbrs	r10, 4
 42e:	0e c0       	rjmp	.+28     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 430:	fe 01       	movw	r30, r28
 432:	e4 0d       	add	r30, r4
 434:	f1 1d       	adc	r31, r1
 436:	80 81       	ld	r24, Z
 438:	80 33       	cpi	r24, 0x30	; 48
 43a:	21 f4       	brne	.+8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 43c:	ea 2d       	mov	r30, r10
 43e:	e9 7e       	andi	r30, 0xE9	; 233
 440:	ae 2e       	mov	r10, r30
 442:	08 c0       	rjmp	.+16     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 444:	a2 fe       	sbrs	r10, 2
 446:	05 c0       	rjmp	.+10     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 448:	1e 5f       	subi	r17, 0xFE	; 254
 44a:	04 c0       	rjmp	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 44c:	8a 2d       	mov	r24, r10
 44e:	86 78       	andi	r24, 0x86	; 134
 450:	09 f0       	breq	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 452:	1f 5f       	subi	r17, 0xFF	; 255
 454:	a3 fc       	sbrc	r10, 3
 456:	11 c0       	rjmp	.+34     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 458:	a0 fe       	sbrs	r10, 0
 45a:	06 c0       	rjmp	.+12     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 45c:	10 17       	cp	r17, r16
 45e:	88 f4       	brcc	.+34     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 460:	04 0d       	add	r16, r4
 462:	b0 2e       	mov	r11, r16
 464:	b1 1a       	sub	r11, r17
 466:	0e c0       	rjmp	.+28     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 468:	10 17       	cp	r17, r16
 46a:	60 f4       	brcc	.+24     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 46c:	b6 01       	movw	r22, r12
 46e:	80 e2       	ldi	r24, 0x20	; 32
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 4a 04 	call	0x894	; 0x894 <fputc>
 476:	1f 5f       	subi	r17, 0xFF	; 255
 478:	f7 cf       	rjmp	.-18     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 47a:	10 17       	cp	r17, r16
 47c:	18 f4       	brcc	.+6      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 47e:	01 1b       	sub	r16, r17
 480:	02 c0       	rjmp	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 482:	b4 2c       	mov	r11, r4
 484:	00 e0       	ldi	r16, 0x00	; 0
 486:	a4 fe       	sbrs	r10, 4
 488:	10 c0       	rjmp	.+32     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 48a:	b6 01       	movw	r22, r12
 48c:	80 e3       	ldi	r24, 0x30	; 48
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 4a 04 	call	0x894	; 0x894 <fputc>
 494:	a2 fe       	sbrs	r10, 2
 496:	17 c0       	rjmp	.+46     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 498:	a1 fc       	sbrc	r10, 1
 49a:	03 c0       	rjmp	.+6      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 49c:	88 e7       	ldi	r24, 0x78	; 120
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a2:	88 e5       	ldi	r24, 0x58	; 88
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	b6 01       	movw	r22, r12
 4a8:	0c c0       	rjmp	.+24     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4aa:	8a 2d       	mov	r24, r10
 4ac:	86 78       	andi	r24, 0x86	; 134
 4ae:	59 f0       	breq	.+22     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4b0:	a1 fe       	sbrs	r10, 1
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b4:	8b e2       	ldi	r24, 0x2B	; 43
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b8:	80 e2       	ldi	r24, 0x20	; 32
 4ba:	a7 fc       	sbrc	r10, 7
 4bc:	8d e2       	ldi	r24, 0x2D	; 45
 4be:	b6 01       	movw	r22, r12
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 4a 04 	call	0x894	; 0x894 <fputc>
 4c6:	4b 14       	cp	r4, r11
 4c8:	38 f4       	brcc	.+14     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4ca:	b6 01       	movw	r22, r12
 4cc:	80 e3       	ldi	r24, 0x30	; 48
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 4a 04 	call	0x894	; 0x894 <fputc>
 4d4:	ba 94       	dec	r11
 4d6:	f7 cf       	rjmp	.-18     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4d8:	4a 94       	dec	r4
 4da:	e1 e0       	ldi	r30, 0x01	; 1
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	ec 0f       	add	r30, r28
 4e0:	fd 1f       	adc	r31, r29
 4e2:	e4 0d       	add	r30, r4
 4e4:	f1 1d       	adc	r31, r1
 4e6:	80 81       	ld	r24, Z
 4e8:	b6 01       	movw	r22, r12
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 4a 04 	call	0x894	; 0x894 <fputc>
 4f0:	41 10       	cpse	r4, r1
 4f2:	f2 cf       	rjmp	.-28     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4f4:	00 23       	and	r16, r16
 4f6:	09 f4       	brne	.+2      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4f8:	2c ce       	rjmp	.-936    	; 0x152 <vfprintf+0x5e>
 4fa:	b6 01       	movw	r22, r12
 4fc:	80 e2       	ldi	r24, 0x20	; 32
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 4a 04 	call	0x894	; 0x894 <fputc>
 504:	01 50       	subi	r16, 0x01	; 1
 506:	f6 cf       	rjmp	.-20     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 508:	f6 01       	movw	r30, r12
 50a:	87 81       	ldd	r24, Z+7	; 0x07
 50c:	90 85       	ldd	r25, Z+8	; 0x08
 50e:	02 c0       	rjmp	.+4      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 510:	8f ef       	ldi	r24, 0xFF	; 255
 512:	9f ef       	ldi	r25, 0xFF	; 255
 514:	62 96       	adiw	r28, 0x12	; 18
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	f8 94       	cli
 51a:	de bf       	out	0x3e, r29	; 62
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	cd bf       	out	0x3d, r28	; 61
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	ff 90       	pop	r15
 52a:	ef 90       	pop	r14
 52c:	df 90       	pop	r13
 52e:	cf 90       	pop	r12
 530:	bf 90       	pop	r11
 532:	af 90       	pop	r10
 534:	9f 90       	pop	r9
 536:	8f 90       	pop	r8
 538:	7f 90       	pop	r7
 53a:	6f 90       	pop	r6
 53c:	4f 90       	pop	r4
 53e:	3f 90       	pop	r3
 540:	2f 90       	pop	r2
 542:	08 95       	ret

Disassembly of section .text.avrlibc:

00000a4a <strnlen>:
 a4a:	cf 92       	push	r12
 a4c:	df 92       	push	r13
 a4e:	ef 92       	push	r14
 a50:	6b 01       	movw	r12, r22
 a52:	e8 2e       	mov	r14, r24
 a54:	9a 01       	movw	r18, r20
 a56:	a8 2f       	mov	r26, r24
 a58:	cb 01       	movw	r24, r22
 a5a:	21 15       	cp	r18, r1
 a5c:	31 05       	cpc	r19, r1
 a5e:	31 f4       	brne	.+12     	; 0xa6c <strnlen+0x22>
 a60:	8c 19       	sub	r24, r12
 a62:	9d 09       	sbc	r25, r13
 a64:	ef 90       	pop	r14
 a66:	df 90       	pop	r13
 a68:	cf 90       	pop	r12
 a6a:	08 95       	ret
 a6c:	fc 01       	movw	r30, r24
 a6e:	5a 2f       	mov	r21, r26
 a70:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__xload_1>
 a74:	66 23       	and	r22, r22
 a76:	a1 f3       	breq	.-24     	; 0xa60 <strnlen+0x16>
 a78:	01 96       	adiw	r24, 0x01	; 1
 a7a:	a1 1d       	adc	r26, r1
 a7c:	21 50       	subi	r18, 0x01	; 1
 a7e:	31 09       	sbc	r19, r1
 a80:	ec cf       	rjmp	.-40     	; 0xa5a <strnlen+0x10>

Disassembly of section .text.avrlibc:

00000894 <fputc>:
 894:	0f 93       	push	r16
 896:	1f 93       	push	r17
 898:	cf 93       	push	r28
 89a:	df 93       	push	r29
 89c:	fb 01       	movw	r30, r22
 89e:	24 81       	ldd	r18, Z+4	; 0x04
 8a0:	21 fd       	sbrc	r18, 1
 8a2:	03 c0       	rjmp	.+6      	; 0x8aa <fputc+0x16>
 8a4:	8f ef       	ldi	r24, 0xFF	; 255
 8a6:	9f ef       	ldi	r25, 0xFF	; 255
 8a8:	2c c0       	rjmp	.+88     	; 0x902 <fputc+0x6e>
 8aa:	22 ff       	sbrs	r18, 2
 8ac:	16 c0       	rjmp	.+44     	; 0x8da <fputc+0x46>
 8ae:	47 81       	ldd	r20, Z+7	; 0x07
 8b0:	50 85       	ldd	r21, Z+8	; 0x08
 8b2:	25 81       	ldd	r18, Z+5	; 0x05
 8b4:	36 81       	ldd	r19, Z+6	; 0x06
 8b6:	42 17       	cp	r20, r18
 8b8:	53 07       	cpc	r21, r19
 8ba:	44 f4       	brge	.+16     	; 0x8cc <fputc+0x38>
 8bc:	a0 81       	ld	r26, Z
 8be:	b1 81       	ldd	r27, Z+1	; 0x01
 8c0:	9d 01       	movw	r18, r26
 8c2:	2f 5f       	subi	r18, 0xFF	; 255
 8c4:	3f 4f       	sbci	r19, 0xFF	; 255
 8c6:	31 83       	std	Z+1, r19	; 0x01
 8c8:	20 83       	st	Z, r18
 8ca:	8c 93       	st	X, r24
 8cc:	27 81       	ldd	r18, Z+7	; 0x07
 8ce:	30 85       	ldd	r19, Z+8	; 0x08
 8d0:	2f 5f       	subi	r18, 0xFF	; 255
 8d2:	3f 4f       	sbci	r19, 0xFF	; 255
 8d4:	30 87       	std	Z+8, r19	; 0x08
 8d6:	27 83       	std	Z+7, r18	; 0x07
 8d8:	14 c0       	rjmp	.+40     	; 0x902 <fputc+0x6e>
 8da:	8b 01       	movw	r16, r22
 8dc:	ec 01       	movw	r28, r24
 8de:	fb 01       	movw	r30, r22
 8e0:	01 84       	ldd	r0, Z+9	; 0x09
 8e2:	f2 85       	ldd	r31, Z+10	; 0x0a
 8e4:	e0 2d       	mov	r30, r0
 8e6:	09 95       	icall
 8e8:	89 2b       	or	r24, r25
 8ea:	e1 f6       	brne	.-72     	; 0x8a4 <fputc+0x10>
 8ec:	d8 01       	movw	r26, r16
 8ee:	17 96       	adiw	r26, 0x07	; 7
 8f0:	8d 91       	ld	r24, X+
 8f2:	9c 91       	ld	r25, X
 8f4:	18 97       	sbiw	r26, 0x08	; 8
 8f6:	01 96       	adiw	r24, 0x01	; 1
 8f8:	18 96       	adiw	r26, 0x08	; 8
 8fa:	9c 93       	st	X, r25
 8fc:	8e 93       	st	-X, r24
 8fe:	17 97       	sbiw	r26, 0x07	; 7
 900:	ce 01       	movw	r24, r28
 902:	df 91       	pop	r29
 904:	cf 91       	pop	r28
 906:	1f 91       	pop	r17
 908:	0f 91       	pop	r16
 90a:	08 95       	ret

Disassembly of section .text.avrlibc:

00000618 <__ultoa_invert>:
 618:	fa 01       	movw	r30, r20
 61a:	aa 27       	eor	r26, r26
 61c:	28 30       	cpi	r18, 0x08	; 8
 61e:	51 f1       	breq	.+84     	; 0x674 <__ultoa_invert+0x5c>
 620:	20 31       	cpi	r18, 0x10	; 16
 622:	81 f1       	breq	.+96     	; 0x684 <__ultoa_invert+0x6c>
 624:	e8 94       	clt
 626:	6f 93       	push	r22
 628:	6e 7f       	andi	r22, 0xFE	; 254
 62a:	6e 5f       	subi	r22, 0xFE	; 254
 62c:	7f 4f       	sbci	r23, 0xFF	; 255
 62e:	8f 4f       	sbci	r24, 0xFF	; 255
 630:	9f 4f       	sbci	r25, 0xFF	; 255
 632:	af 4f       	sbci	r26, 0xFF	; 255
 634:	b1 e0       	ldi	r27, 0x01	; 1
 636:	3e d0       	rcall	.+124    	; 0x6b4 <__ultoa_invert+0x9c>
 638:	b4 e0       	ldi	r27, 0x04	; 4
 63a:	3c d0       	rcall	.+120    	; 0x6b4 <__ultoa_invert+0x9c>
 63c:	67 0f       	add	r22, r23
 63e:	78 1f       	adc	r23, r24
 640:	89 1f       	adc	r24, r25
 642:	9a 1f       	adc	r25, r26
 644:	a1 1d       	adc	r26, r1
 646:	68 0f       	add	r22, r24
 648:	79 1f       	adc	r23, r25
 64a:	8a 1f       	adc	r24, r26
 64c:	91 1d       	adc	r25, r1
 64e:	a1 1d       	adc	r26, r1
 650:	6a 0f       	add	r22, r26
 652:	71 1d       	adc	r23, r1
 654:	81 1d       	adc	r24, r1
 656:	91 1d       	adc	r25, r1
 658:	a1 1d       	adc	r26, r1
 65a:	20 d0       	rcall	.+64     	; 0x69c <__ultoa_invert+0x84>
 65c:	09 f4       	brne	.+2      	; 0x660 <__ultoa_invert+0x48>
 65e:	68 94       	set
 660:	3f 91       	pop	r19
 662:	2a e0       	ldi	r18, 0x0A	; 10
 664:	26 9f       	mul	r18, r22
 666:	11 24       	eor	r1, r1
 668:	30 19       	sub	r19, r0
 66a:	30 5d       	subi	r19, 0xD0	; 208
 66c:	31 93       	st	Z+, r19
 66e:	de f6       	brtc	.-74     	; 0x626 <__ultoa_invert+0xe>
 670:	cf 01       	movw	r24, r30
 672:	08 95       	ret
 674:	46 2f       	mov	r20, r22
 676:	47 70       	andi	r20, 0x07	; 7
 678:	40 5d       	subi	r20, 0xD0	; 208
 67a:	41 93       	st	Z+, r20
 67c:	b3 e0       	ldi	r27, 0x03	; 3
 67e:	0f d0       	rcall	.+30     	; 0x69e <__ultoa_invert+0x86>
 680:	c9 f7       	brne	.-14     	; 0x674 <__ultoa_invert+0x5c>
 682:	f6 cf       	rjmp	.-20     	; 0x670 <__ultoa_invert+0x58>
 684:	46 2f       	mov	r20, r22
 686:	4f 70       	andi	r20, 0x0F	; 15
 688:	40 5d       	subi	r20, 0xD0	; 208
 68a:	4a 33       	cpi	r20, 0x3A	; 58
 68c:	18 f0       	brcs	.+6      	; 0x694 <__ultoa_invert+0x7c>
 68e:	49 5d       	subi	r20, 0xD9	; 217
 690:	31 fd       	sbrc	r19, 1
 692:	40 52       	subi	r20, 0x20	; 32
 694:	41 93       	st	Z+, r20
 696:	02 d0       	rcall	.+4      	; 0x69c <__ultoa_invert+0x84>
 698:	a9 f7       	brne	.-22     	; 0x684 <__ultoa_invert+0x6c>
 69a:	ea cf       	rjmp	.-44     	; 0x670 <__ultoa_invert+0x58>
 69c:	b4 e0       	ldi	r27, 0x04	; 4
 69e:	a6 95       	lsr	r26
 6a0:	97 95       	ror	r25
 6a2:	87 95       	ror	r24
 6a4:	77 95       	ror	r23
 6a6:	67 95       	ror	r22
 6a8:	ba 95       	dec	r27
 6aa:	c9 f7       	brne	.-14     	; 0x69e <__ultoa_invert+0x86>
 6ac:	00 97       	sbiw	r24, 0x00	; 0
 6ae:	61 05       	cpc	r22, r1
 6b0:	71 05       	cpc	r23, r1
 6b2:	08 95       	ret
 6b4:	9b 01       	movw	r18, r22
 6b6:	ac 01       	movw	r20, r24
 6b8:	0a 2e       	mov	r0, r26
 6ba:	06 94       	lsr	r0
 6bc:	57 95       	ror	r21
 6be:	47 95       	ror	r20
 6c0:	37 95       	ror	r19
 6c2:	27 95       	ror	r18
 6c4:	ba 95       	dec	r27
 6c6:	c9 f7       	brne	.-14     	; 0x6ba <__ultoa_invert+0xa2>
 6c8:	62 0f       	add	r22, r18
 6ca:	73 1f       	adc	r23, r19
 6cc:	84 1f       	adc	r24, r20
 6ce:	95 1f       	adc	r25, r21
 6d0:	a0 1d       	adc	r26, r0
 6d2:	08 95       	ret

Disassembly of section .text.libgcc:

00000bc0 <__xload_1>:
 bc0:	57 fd       	sbrc	r21, 7
 bc2:	03 c0       	rjmp	.+6      	; 0xbca <__xload_1+0xa>
 bc4:	5b bf       	out	0x3b, r21	; 59
 bc6:	67 91       	elpm	r22, Z+
 bc8:	08 95       	ret
 bca:	60 81       	ld	r22, Z
 bcc:	08 95       	ret
