
Guitar_Hero.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a0  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  000001cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b21  00000000  00000000  000001ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000814  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002a1  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  000017d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000b3  00000000  00000000  00001ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000148  00000148  0000019c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.__vector_8 00000024  0000011a  0000011a  0000016e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.initTimer 0000000a  0000013e  0000013e  00000192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000036  000000e4  000000e4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  10:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  14:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  18:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  1c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  20:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_8>
  24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  68:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  6c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  70:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  74:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  78:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  7c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  80:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  84:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  88:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	ec e8       	ldi	r30, 0x8C	; 140
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	19 c0       	rjmp	.+50     	; 0xd2 <__do_clear_bss+0x8>
  a0:	b7 91       	elpm	r27, Z+
  a2:	a7 91       	elpm	r26, Z+
  a4:	37 91       	elpm	r19, Z+
  a6:	27 91       	elpm	r18, Z+
  a8:	07 91       	elpm	r16, Z+
  aa:	07 fd       	sbrc	r16, 7
  ac:	0e c0       	rjmp	.+28     	; 0xca <__do_clear_bss>
  ae:	97 91       	elpm	r25, Z+
  b0:	87 91       	elpm	r24, Z+
  b2:	ef 01       	movw	r28, r30
  b4:	f9 2f       	mov	r31, r25
  b6:	e8 2f       	mov	r30, r24
  b8:	0b bf       	out	0x3b, r16	; 59
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x22>
  c4:	fe 01       	movw	r30, r28
  c6:	1b be       	out	0x3b, r1	; 59
  c8:	04 c0       	rjmp	.+8      	; 0xd2 <__do_clear_bss+0x8>

000000ca <__do_clear_bss>:
  ca:	1d 92       	st	X+, r1
  cc:	a2 17       	cp	r26, r18
  ce:	b3 07       	cpc	r27, r19
  d0:	e1 f7       	brne	.-8      	; 0xca <__do_clear_bss>
  d2:	ec 38       	cpi	r30, 0x8C	; 140
  d4:	f4 07       	cpc	r31, r20
  d6:	21 f7       	brne	.-56     	; 0xa0 <__do_copy_data+0x8>
  d8:	0e 94 72 00 	call	0xe4	; 0xe4 <_etext>
  dc:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>

Disassembly of section .text:

00000148 <__bad_interrupt>:
 148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.__vector_8:

0000011a <__vector_8>:
/************************************************************************/
/* Interrupt called on TRIGGER_PIN going high and low                   */
/* Starts the timer to check the pulse length							*/
/************************************************************************/
ISR ( INT7_vect )
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
	PORTD ^= 0x01;
 128:	92 b3       	in	r25, 0x12	; 18
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	89 27       	eor	r24, r25
 12e:	82 bb       	out	0x12, r24	; 18
		
	
	}
	
		
}
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

Disassembly of section .text.initTimer:

0000013e <initTimer>:
	return 1;
}

void initTimer()
{
	sei(); // turn_on intr all
 13e:	78 94       	sei
	TCCR1A = 0b00000000; // Initialize T1: timer, prescaler=256,
 140:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001001; // compare output disconnected, CTC, RUN
 142:	89 e0       	ldi	r24, 0x09	; 9
 144:	8e bd       	out	0x2e, r24	; 46
 146:	08 95       	ret

Disassembly of section .text.main:

000000e4 <main>:
}

void initTimer();

int main(void)
{
  e4:	cf 93       	push	r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	84 e3       	ldi	r24, 0x34	; 52
  ea:	9c e0       	ldi	r25, 0x0C	; 12
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x8>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x12>
  f6:	00 00       	nop
	_delay_ms(500);	
	
	//char string[10];
	
	// Init I/O
	DDRD = 0xFF;			// Port D to output
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	c1 bb       	out	0x11, r28	; 17
	DDRE = 0b00001111;		// PORTD(7:4) input, PORTD(3:0) output
  fc:	8f e0       	ldi	r24, 0x0F	; 15
  fe:	82 b9       	out	0x02, r24	; 2

	// Init Interrupt hardware
	EICRB |= 0x40;			// ISC7 Rising edge
 100:	8a b7       	in	r24, 0x3a	; 58
 102:	80 64       	ori	r24, 0x40	; 64
 104:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= 0x80;			// Enable INT7
 106:	89 b7       	in	r24, 0x39	; 57
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	89 bf       	out	0x39, r24	; 57
		
	initTimer();
 10c:	0e 94 9f 00 	call	0x13e	; 0x13e <initTimer>
	
	// Initing the LCD module
	//LCD_init();
	
	DDRD = 0xFF;
 110:	c1 bb       	out	0x11, r28	; 17
	    _delay_ms( 5000 );
    }
	*/
		
	return 1;
}
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	cf 91       	pop	r28
 118:	08 95       	ret
