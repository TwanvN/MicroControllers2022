
Guitar_Hero.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000216  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  00000245  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000bfe  00000000  00000000  0000027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000893  00000000  00000000  00000e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000030c  00000000  00000000  0000170e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  00001a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002a3  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000d0  00000000  00000000  00001d33  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001e03  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000019e  0000019e  00000212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.__vector_8 0000003a  0000013e  0000013e  000001b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_10 00000016  00000178  00000178  000001ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.initTimer 00000010  0000018e  0000018e  00000202  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000054  000000ea  000000ea  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.ticksOnTrigger 00000001  00800100  00800100  00000216  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
   8:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
   c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  10:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  14:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  18:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  1c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  20:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_8>
  24:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  28:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_10>
  2c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  30:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  34:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  38:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  3c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  40:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  44:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  48:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  4c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  50:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  54:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  58:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  5c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  60:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  64:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  68:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  6c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  70:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  74:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  78:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  7c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  80:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  84:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  88:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 01       	movw	r0, r2
  90:	80 00       	.word	0x0080	; ????

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e1       	ldi	r29, 0x10	; 16
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	19 c0       	rjmp	.+50     	; 0xd8 <__do_clear_bss+0x8>
  a6:	b7 91       	elpm	r27, Z+
  a8:	a7 91       	elpm	r26, Z+
  aa:	37 91       	elpm	r19, Z+
  ac:	27 91       	elpm	r18, Z+
  ae:	07 91       	elpm	r16, Z+
  b0:	07 fd       	sbrc	r16, 7
  b2:	0e c0       	rjmp	.+28     	; 0xd0 <__do_clear_bss>
  b4:	97 91       	elpm	r25, Z+
  b6:	87 91       	elpm	r24, Z+
  b8:	ef 01       	movw	r28, r30
  ba:	f9 2f       	mov	r31, r25
  bc:	e8 2f       	mov	r30, r24
  be:	0b bf       	out	0x3b, r16	; 59
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x22>
  ca:	fe 01       	movw	r30, r28
  cc:	1b be       	out	0x3b, r1	; 59
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_clear_bss+0x8>

000000d0 <__do_clear_bss>:
  d0:	1d 92       	st	X+, r1
  d2:	a2 17       	cp	r26, r18
  d4:	b3 07       	cpc	r27, r19
  d6:	e1 f7       	brne	.-8      	; 0xd0 <__do_clear_bss>
  d8:	e1 39       	cpi	r30, 0x91	; 145
  da:	f4 07       	cpc	r31, r20
  dc:	21 f7       	brne	.-56     	; 0xa6 <__do_copy_data+0x8>
  de:	0e 94 75 00 	call	0xea	; 0xea <_etext>
  e2:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

Disassembly of section .text:

0000019e <__bad_interrupt>:
 19e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_8:

0000013e <__vector_8>:
int timerOverflow = 0;

char ticksOnTrigger = 0;

ISR ( INT7_vect )
{
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
	PORTA = TCNT2;
 14c:	84 b5       	in	r24, 0x24	; 36
 14e:	8b bb       	out	0x1b, r24	; 27
	
	
	if(ticksOnTrigger == 0)
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 154:	81 11       	cpse	r24, r1
 156:	04 c0       	rjmp	.+8      	; 0x160 <__vector_8+0x22>
		ticksOnTrigger = TCNT2;
 158:	84 b5       	in	r24, 0x24	; 36
 15a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 15e:	05 c0       	rjmp	.+10     	; 0x16a <__vector_8+0x2c>
	else
	{
		unsigned char diff = TCNT2 - ticksOnTrigger;	// Getting the difference
 160:	94 b5       	in	r25, 0x24	; 36
 162:	98 1b       	sub	r25, r24
		
		PORTD = diff;	// Setting DDRD to the value from the echo
 164:	92 bb       	out	0x12, r25	; 18
		
		ticksOnTrigger = 0; // resetting ticksOnTrigger
 166:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

Disassembly of section .text.__vector_10:

00000178 <__vector_10>:

ISR ( TIMER2_OVF_vect )
{	
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
	TCNT2 = 0; // Resetting timer
 182:	14 bc       	out	0x24, r1	; 36
}
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

Disassembly of section .text.initTimer:

0000018e <initTimer>:
	return 1;
}

void initTimer()
{
	TCNT2 = 0;
 18e:	14 bc       	out	0x24, r1	; 36
	TIMSK |= 0b01000000;
 190:	87 b7       	in	r24, 0x37	; 55
 192:	80 64       	ori	r24, 0x40	; 64
 194:	87 bf       	out	0x37, r24	; 55
	TCCR2 = 0b00001100;
 196:	8c e0       	ldi	r24, 0x0C	; 12
 198:	85 bd       	out	0x25, r24	; 37
	sei();
 19a:	78 94       	sei
 19c:	08 95       	ret

Disassembly of section .text.main:

000000ea <main>:
	//_delay_ms(500);	
	
	//char string[10];
	
	// Init I/O
	DDRD = 0xFF;			// Port D to output
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
  ee:	8a bb       	out	0x1a, r24	; 26
	DDRE = 0b00001111;		// PORTE(7:4) input, PORTE(3:0) output
  f0:	8f e0       	ldi	r24, 0x0F	; 15
  f2:	82 b9       	out	0x02, r24	; 2

	// Init Interrupt hardware
	EICRB |= 0x40;			// ISC7 Rising edge
  f4:	8a b7       	in	r24, 0x3a	; 58
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= 0x80;			// Enable INT7
  fa:	89 b7       	in	r24, 0x39	; 57
  fc:	80 68       	ori	r24, 0x80	; 128
  fe:	89 bf       	out	0x39, r24	; 57
		
	initTimer();
 100:	0e 94 c7 00 	call	0x18e	; 0x18e <initTimer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	8e e9       	ldi	r24, 0x9E	; 158
 108:	94 e2       	ldi	r25, 0x24	; 36
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x20>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x2a>
 114:	00 00       	nop
	//LCD_init();
	
	_delay_ms(1500);
					
    while (1) {		
		PORTE |= (1 << TRIGGER_PIN);
 116:	83 b1       	in	r24, 0x03	; 3
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	2a e1       	ldi	r18, 0x1A	; 26
 11e:	2a 95       	dec	r18
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x34>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x3a>
		
		_delay_us(10);
		
		PORTE &= ~(1 << TRIGGER_PIN);
 124:	83 b1       	in	r24, 0x03	; 3
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	94 e3       	ldi	r25, 0x34	; 52
 12e:	2c e0       	ldi	r18, 0x0C	; 12
 130:	81 50       	subi	r24, 0x01	; 1
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	20 40       	sbci	r18, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x46>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x50>
 13a:	00 00       	nop
 13c:	ec cf       	rjmp	.-40     	; 0x116 <main+0x2c>
