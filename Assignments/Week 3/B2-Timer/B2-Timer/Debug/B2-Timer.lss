
B2-Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014c  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000017b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a2d  00000000  00000000  000001ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000079c  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000024f  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  000015c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000003c  00000000  00000000  00001895  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000018d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000f4  000000f4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.__vector_9 00000034  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.initTimer 00000012  000000d8  000000d8  0000012c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000000a  000000ea  000000ea  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_etext>
  28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  40:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  48:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  4c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  60:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  68:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  6c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  70:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  74:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  7c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  80:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  84:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  88:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 75 00 	call	0xea	; 0xea <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

000000f4 <__bad_interrupt>:
  f4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_9:

000000a4 <__vector_9>:

#define TICKS_HIGH 195
#define TICKS_LOW 117

// Interrupt routine timer2 overflow
ISR( TIMER2_COMP_vect ) {
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
	
	// Checking if D7 is high
	if (OCR2 == TICKS_LOW)
  b0:	83 b5       	in	r24, 0x23	; 35
  b2:	85 37       	cpi	r24, 0x75	; 117
  b4:	31 f4       	brne	.+12     	; 0xc2 <__vector_9+0x1e>
	{
		PORTD ^= (1 << 7);
  b6:	82 b3       	in	r24, 0x12	; 18
  b8:	80 58       	subi	r24, 0x80	; 128
  ba:	82 bb       	out	0x12, r24	; 18
		OCR2 = TICKS_HIGH;	// Preset value
  bc:	83 ec       	ldi	r24, 0xC3	; 195
  be:	83 bd       	out	0x23, r24	; 35
  c0:	05 c0       	rjmp	.+10     	; 0xcc <__vector_9+0x28>
	} else {
		PORTD ^= (1 << 7);
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	80 58       	subi	r24, 0x80	; 128
  c6:	82 bb       	out	0x12, r24	; 18
		OCR2 = TICKS_LOW;
  c8:	85 e7       	ldi	r24, 0x75	; 117
  ca:	83 bd       	out	0x23, r24	; 35
	}
}
  cc:	8f 91       	pop	r24
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

Disassembly of section .text.initTimer:

000000d8 <initTimer>:
    }
}

void initTimer()
{
	OCR2 = TICKS_HIGH;
  d8:	83 ec       	ldi	r24, 0xC3	; 195
  da:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<7);
  dc:	87 b7       	in	r24, 0x37	; 55
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	87 bf       	out	0x37, r24	; 55
	sei();
  e2:	78 94       	sei
	TCCR2 = 0b00001101;
  e4:	8d e0       	ldi	r24, 0x0D	; 13
  e6:	85 bd       	out	0x25, r24	; 37
  e8:	08 95       	ret

Disassembly of section .text.main:

000000ea <main>:
	}
}

int main(void)
{
	DDRD = 0xFF;
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	81 bb       	out	0x11, r24	; 17
	
	initTimer();
  ee:	0e 94 6c 00 	call	0xd8	; 0xd8 <initTimer>
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <main+0x8>
