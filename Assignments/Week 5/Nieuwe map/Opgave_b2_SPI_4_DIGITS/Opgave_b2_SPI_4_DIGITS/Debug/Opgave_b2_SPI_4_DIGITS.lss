
Opgave_b2_SPI_4_DIGITS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ba  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000078  00000000  00000000  000002e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000ec0  00000000  00000000  00000361  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000008c3  00000000  00000000  00001221  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000468  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000104  00000000  00000000  00001f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000288  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000024f  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000080  00000000  00000000  00002527  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000262  00000262  000002b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000025a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  000001f8  000001f8  0000024c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.spi_masterInit 00000016  0000022e  0000022e  00000282  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.spi_write 00000008  0000025a  0000025a  000002ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.spi_slaveSelect 00000018  00000216  00000216  0000026a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.spi_slaveDeSelect 00000016  00000244  00000244  00000298  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.spi_writeWord 00000026  000001b0  000001b0  00000204  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.displayDriverInit 00000022  000001d6  000001d6  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.writeLedDisplay 00000084  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.main    00000038  00000128  00000128  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.libgcc.div 00000028  00000160  00000160  000001b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.libgcc.div 00000028  00000188  00000188  000001dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
   8:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
   c:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  10:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  14:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  18:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  1c:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  20:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  24:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  28:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  2c:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  30:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  34:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  38:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  3c:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  40:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  44:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  48:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  4c:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  50:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  54:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  58:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  5c:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  60:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  64:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  68:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  6c:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  70:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  74:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  78:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  7c:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  80:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  84:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  88:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 94 00 	call	0x128	; 0x128 <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000262 <__bad_interrupt>:
 262:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

000001f8 <wait>:
{
	SPDR = data;							// Load byte to Data register --> starts transmission
	while( !(SPSR & BIT(SPIF)) ); 			// Wait for transmission complete 
	data = SPDR;							// New received data (eventually, MISO) in SPDR
	return data;							// Return received byte
}
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	08 c0       	rjmp	.+16     	; 0x20e <wait+0x16>
 1fe:	ef ec       	ldi	r30, 0xCF	; 207
 200:	f7 e0       	ldi	r31, 0x07	; 7
 202:	31 97       	sbiw	r30, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <wait+0xa>
 206:	00 c0       	rjmp	.+0      	; 0x208 <wait+0x10>
 208:	00 00       	nop
 20a:	2f 5f       	subi	r18, 0xFF	; 255
 20c:	3f 4f       	sbci	r19, 0xFF	; 255
 20e:	28 17       	cp	r18, r24
 210:	39 07       	cpc	r19, r25
 212:	ac f3       	brlt	.-22     	; 0x1fe <wait+0x6>
 214:	08 95       	ret

Disassembly of section .text.spi_masterInit:

0000022e <spi_masterInit>:
		}
}

void spi_masterInit(void)
{
	DDR_SPI = 0xff;							// All pins output: MOSI, SCK, SS, SS_display as output
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	87 bb       	out	0x17, r24	; 23
	DDR_SPI &= ~BIT(SPI_MISO);				// 	except: MISO input
 232:	87 b3       	in	r24, 0x17	; 23
 234:	87 7f       	andi	r24, 0xF7	; 247
 236:	87 bb       	out	0x17, r24	; 23
	PORT_SPI |= BIT(SPI_SS);				// SS_ADC == 1: deselect slave
 238:	88 b3       	in	r24, 0x18	; 24
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	88 bb       	out	0x18, r24	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);	// or: SPCR = 0b11010010;
 23e:	82 e5       	ldi	r24, 0x52	; 82
 240:	8d b9       	out	0x0d, r24	; 13
 242:	08 95       	ret

Disassembly of section .text.spi_write:

0000025a <spi_write>:


// Write a byte from master to slave
void spi_write( unsigned char data )				
{
	SPDR = data;							// Load byte to Data register --> starts transmission
 25a:	8f b9       	out	0x0f, r24	; 15
	while( !(SPSR & BIT(SPIF)) ); 			// Wait for transmission complete 
 25c:	77 9b       	sbis	0x0e, 7	; 14
 25e:	fe cf       	rjmp	.-4      	; 0x25c <spi_write+0x2>
}
 260:	08 95       	ret

Disassembly of section .text.spi_slaveSelect:

00000216 <spi_slaveSelect>:
}

// Select device on pinnumer PORTB
void spi_slaveSelect(unsigned char chipNumber)
{
	PORTB &= ~BIT(chipNumber);
 216:	98 b3       	in	r25, 0x18	; 24
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <spi_slaveSelect+0xc>
 21e:	22 0f       	add	r18, r18
 220:	33 1f       	adc	r19, r19
 222:	8a 95       	dec	r24
 224:	e2 f7       	brpl	.-8      	; 0x21e <spi_slaveSelect+0x8>
 226:	20 95       	com	r18
 228:	29 23       	and	r18, r25
 22a:	28 bb       	out	0x18, r18	; 24
 22c:	08 95       	ret

Disassembly of section .text.spi_slaveDeSelect:

00000244 <spi_slaveDeSelect>:

// Deselect device on pinnumer PORTB
void spi_slaveDeSelect(unsigned char chipNumber)
{

	PORTB |= BIT(chipNumber);
 244:	98 b3       	in	r25, 0x18	; 24
 246:	21 e0       	ldi	r18, 0x01	; 1
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <spi_slaveDeSelect+0xc>
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	8a 95       	dec	r24
 252:	e2 f7       	brpl	.-8      	; 0x24c <spi_slaveDeSelect+0x8>
 254:	29 2b       	or	r18, r25
 256:	28 bb       	out	0x18, r18	; 24
 258:	08 95       	ret

Disassembly of section .text.spi_writeWord:

000001b0 <spi_writeWord>:
{
	SPDR = data;							// Load byte to Data register --> starts transmission
	while( !(SPSR & BIT(SPIF)) ); 			// Wait for transmission complete 
	data = SPDR;							// New received data (eventually, MISO) in SPDR
	return data;							// Return received byte
}
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	d8 2f       	mov	r29, r24
 1b6:	c6 2f       	mov	r28, r22
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 0b 01 	call	0x216	; 0x216 <spi_slaveSelect>
 1be:	8d 2f       	mov	r24, r29
 1c0:	0e 94 2d 01 	call	0x25a	; 0x25a <spi_write>
 1c4:	8c 2f       	mov	r24, r28
 1c6:	0e 94 2d 01 	call	0x25a	; 0x25a <spi_write>
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 22 01 	call	0x244	; 0x244 <spi_slaveDeSelect>
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

Disassembly of section .text.displayDriverInit:

000001d6 <displayDriverInit>:
 1d6:	6f ef       	ldi	r22, 0xFF	; 255
 1d8:	89 e0       	ldi	r24, 0x09	; 9
 1da:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <spi_writeWord>
 1de:	64 e0       	ldi	r22, 0x04	; 4
 1e0:	8a e0       	ldi	r24, 0x0A	; 10
 1e2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <spi_writeWord>
 1e6:	63 e0       	ldi	r22, 0x03	; 3
 1e8:	8b e0       	ldi	r24, 0x0B	; 11
 1ea:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <spi_writeWord>
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	8c e0       	ldi	r24, 0x0C	; 12
 1f2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <spi_writeWord>
 1f6:	08 95       	ret

Disassembly of section .text.writeLedDisplay:

000000a4 <writeLedDisplay>:
  a4:	ff 92       	push	r15
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	ec 01       	movw	r28, r24
  b0:	99 23       	and	r25, r25
  b2:	8c f4       	brge	.+34     	; 0xd6 <writeLedDisplay+0x32>
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	22 c0       	rjmp	.+68     	; 0xfc <writeLedDisplay+0x58>
  b8:	ce 01       	movw	r24, r28
  ba:	6a e0       	ldi	r22, 0x0A	; 10
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	0e 94 b0 00 	call	0x160	; 0x160 <__divmodhi4>
  c2:	f6 2e       	mov	r15, r22
  c4:	07 2f       	mov	r16, r23
  c6:	68 2f       	mov	r22, r24
  c8:	81 2f       	mov	r24, r17
  ca:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <spi_writeWord>
  ce:	cf 2d       	mov	r28, r15
  d0:	d0 2f       	mov	r29, r16
  d2:	1f 5f       	subi	r17, 0xFF	; 255
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <writeLedDisplay+0x34>
  d6:	11 e0       	ldi	r17, 0x01	; 1
  d8:	15 30       	cpi	r17, 0x05	; 5
  da:	70 f3       	brcs	.-36     	; 0xb8 <writeLedDisplay+0x14>
  dc:	15 c0       	rjmp	.+42     	; 0x108 <writeLedDisplay+0x64>
  de:	ce 01       	movw	r24, r28
  e0:	6a e0       	ldi	r22, 0x0A	; 10
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	0e 94 b0 00 	call	0x160	; 0x160 <__divmodhi4>
  e8:	f6 2e       	mov	r15, r22
  ea:	07 2f       	mov	r16, r23
  ec:	68 2f       	mov	r22, r24
  ee:	61 95       	neg	r22
  f0:	81 2f       	mov	r24, r17
  f2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <spi_writeWord>
  f6:	cf 2d       	mov	r28, r15
  f8:	d0 2f       	mov	r29, r16
  fa:	1f 5f       	subi	r17, 0xFF	; 255
  fc:	14 30       	cpi	r17, 0x04	; 4
  fe:	78 f3       	brcs	.-34     	; 0xde <writeLedDisplay+0x3a>
 100:	6a e0       	ldi	r22, 0x0A	; 10
 102:	84 e0       	ldi	r24, 0x04	; 4
 104:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <spi_writeWord>
 108:	dd 23       	and	r29, r29
 10a:	24 f4       	brge	.+8      	; 0x114 <writeLedDisplay+0x70>
 10c:	6a e0       	ldi	r22, 0x0A	; 10
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <spi_writeWord>
 114:	88 ee       	ldi	r24, 0xE8	; 232
 116:	93 e0       	ldi	r25, 0x03	; 3
 118:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <wait>
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	ff 90       	pop	r15
 126:	08 95       	ret

Disassembly of section .text.main:

00000128 <main>:
 128:	cf 93       	push	r28
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	87 bb       	out	0x17, r24	; 23
 12e:	0e 94 17 01 	call	0x22e	; 0x22e <spi_masterInit>
 132:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <displayDriverInit>
 136:	c1 e0       	ldi	r28, 0x01	; 1
 138:	05 c0       	rjmp	.+10     	; 0x144 <main+0x1c>
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	8c 2f       	mov	r24, r28
 13e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <spi_writeWord>
 142:	cf 5f       	subi	r28, 0xFF	; 255
 144:	c5 30       	cpi	r28, 0x05	; 5
 146:	c8 f3       	brcs	.-14     	; 0x13a <main+0x12>
 148:	88 ee       	ldi	r24, 0xE8	; 232
 14a:	93 e0       	ldi	r25, 0x03	; 3
 14c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <wait>
 150:	89 e3       	ldi	r24, 0x39	; 57
 152:	9b e1       	ldi	r25, 0x1B	; 27
 154:	0e 94 52 00 	call	0xa4	; 0xa4 <__data_load_end>
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000160 <__divmodhi4>:
 160:	97 fb       	bst	r25, 7
 162:	07 2e       	mov	r0, r23
 164:	16 f4       	brtc	.+4      	; 0x16a <__divmodhi4+0xa>
 166:	00 94       	com	r0
 168:	07 d0       	rcall	.+14     	; 0x178 <__divmodhi4_neg1>
 16a:	77 fd       	sbrc	r23, 7
 16c:	09 d0       	rcall	.+18     	; 0x180 <__divmodhi4_neg2>
 16e:	0e 94 c4 00 	call	0x188	; 0x188 <__udivmodhi4>
 172:	07 fc       	sbrc	r0, 7
 174:	05 d0       	rcall	.+10     	; 0x180 <__divmodhi4_neg2>
 176:	3e f4       	brtc	.+14     	; 0x186 <__divmodhi4_exit>

00000178 <__divmodhi4_neg1>:
 178:	90 95       	com	r25
 17a:	81 95       	neg	r24
 17c:	9f 4f       	sbci	r25, 0xFF	; 255
 17e:	08 95       	ret

00000180 <__divmodhi4_neg2>:
 180:	70 95       	com	r23
 182:	61 95       	neg	r22
 184:	7f 4f       	sbci	r23, 0xFF	; 255

00000186 <__divmodhi4_exit>:
 186:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000188 <__udivmodhi4>:
 188:	aa 1b       	sub	r26, r26
 18a:	bb 1b       	sub	r27, r27
 18c:	51 e1       	ldi	r21, 0x11	; 17
 18e:	07 c0       	rjmp	.+14     	; 0x19e <__udivmodhi4_ep>

00000190 <__udivmodhi4_loop>:
 190:	aa 1f       	adc	r26, r26
 192:	bb 1f       	adc	r27, r27
 194:	a6 17       	cp	r26, r22
 196:	b7 07       	cpc	r27, r23
 198:	10 f0       	brcs	.+4      	; 0x19e <__udivmodhi4_ep>
 19a:	a6 1b       	sub	r26, r22
 19c:	b7 0b       	sbc	r27, r23

0000019e <__udivmodhi4_ep>:
 19e:	88 1f       	adc	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	5a 95       	dec	r21
 1a4:	a9 f7       	brne	.-22     	; 0x190 <__udivmodhi4_loop>
 1a6:	80 95       	com	r24
 1a8:	90 95       	com	r25
 1aa:	bc 01       	movw	r22, r24
 1ac:	cd 01       	movw	r24, r26
 1ae:	08 95       	ret
