
Opgave_B1_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000070  00000000  00000000  00000239  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000e38  00000000  00000000  000002a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000008ec  00000000  00000000  000010e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000040f  00000000  00000000  000019cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d8  00000000  00000000  00001ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002b4  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000016f  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  000022d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001b2  000001b2  00000206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002338  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  00000148  00000148  0000019c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.spi_masterInit 00000016  0000017e  0000017e  000001d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.spi_write 00000008  000001aa  000001aa  000001fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.spi_slaveSelect 00000018  00000166  00000166  000001ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.spi_slaveDeSelect 00000016  00000194  00000194  000001e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.spi_writeWord 0000002e  000000f8  000000f8  0000014c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.displayDriverInit 00000022  00000126  00000126  0000017a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.main    00000054  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
   8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
   c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

000001b2 <__bad_interrupt>:
 1b2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

00000148 <wait>:
{
	SPDR = data;							// Load byte to Data register --> starts transmission
	while( !(SPSR & BIT(SPIF)) ); 			// Wait for transmission complete 
	data = SPDR;							// New received data (eventually, MISO) in SPDR
	return data;							// Return received byte
}
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	08 c0       	rjmp	.+16     	; 0x15e <wait+0x16>
 14e:	ef ec       	ldi	r30, 0xCF	; 207
 150:	f7 e0       	ldi	r31, 0x07	; 7
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <wait+0xa>
 156:	00 c0       	rjmp	.+0      	; 0x158 <wait+0x10>
 158:	00 00       	nop
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	3f 4f       	sbci	r19, 0xFF	; 255
 15e:	28 17       	cp	r18, r24
 160:	39 07       	cpc	r19, r25
 162:	ac f3       	brlt	.-22     	; 0x14e <wait+0x6>
 164:	08 95       	ret

Disassembly of section .text.spi_masterInit:

0000017e <spi_masterInit>:
	spi_slaveDeSelect(0);
}

void spi_masterInit(void)
{
	DDR_SPI = 0xff;							// All pins output: MOSI, SCK, SS, SS_display as output
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	87 bb       	out	0x17, r24	; 23
	DDR_SPI &= ~BIT(SPI_MISO);				// 	except: MISO input
 182:	87 b3       	in	r24, 0x17	; 23
 184:	87 7f       	andi	r24, 0xF7	; 247
 186:	87 bb       	out	0x17, r24	; 23
	PORT_SPI |= BIT(SPI_SS);				// SS_ADC == 1: deselect slave
 188:	88 b3       	in	r24, 0x18	; 24
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	88 bb       	out	0x18, r24	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);	// or: SPCR = 0b11010010;
 18e:	82 e5       	ldi	r24, 0x52	; 82
 190:	8d b9       	out	0x0d, r24	; 13
 192:	08 95       	ret

Disassembly of section .text.spi_write:

000001aa <spi_write>:


// Write a byte from master to slave
void spi_write( unsigned char data )				
{
	SPDR = data;							// Load byte to Data register --> starts transmission
 1aa:	8f b9       	out	0x0f, r24	; 15
	while( !(SPSR & BIT(SPIF)) ); 			// Wait for transmission complete 
 1ac:	77 9b       	sbis	0x0e, 7	; 14
 1ae:	fe cf       	rjmp	.-4      	; 0x1ac <spi_write+0x2>
}
 1b0:	08 95       	ret

Disassembly of section .text.spi_slaveSelect:

00000166 <spi_slaveSelect>:
}

// Select device on pinnumer PORTB
void spi_slaveSelect(unsigned char chipNumber)
{
	PORTB &= ~BIT(chipNumber);
 166:	98 b3       	in	r25, 0x18	; 24
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <spi_slaveSelect+0xc>
 16e:	22 0f       	add	r18, r18
 170:	33 1f       	adc	r19, r19
 172:	8a 95       	dec	r24
 174:	e2 f7       	brpl	.-8      	; 0x16e <spi_slaveSelect+0x8>
 176:	20 95       	com	r18
 178:	29 23       	and	r18, r25
 17a:	28 bb       	out	0x18, r18	; 24
 17c:	08 95       	ret

Disassembly of section .text.spi_slaveDeSelect:

00000194 <spi_slaveDeSelect>:

// Deselect device on pinnumer PORTB
void spi_slaveDeSelect(unsigned char chipNumber)
{

	PORTB |= BIT(chipNumber);
 194:	98 b3       	in	r25, 0x18	; 24
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <spi_slaveDeSelect+0xc>
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	8a 95       	dec	r24
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <spi_slaveDeSelect+0x8>
 1a4:	29 2b       	or	r18, r25
 1a6:	28 bb       	out	0x18, r18	; 24
 1a8:	08 95       	ret

Disassembly of section .text.spi_writeWord:

000000f8 <spi_writeWord>:
{
	SPDR = data;							// Load byte to Data register --> starts transmission
	while( !(SPSR & BIT(SPIF)) ); 			// Wait for transmission complete 
	data = SPDR;							// New received data (eventually, MISO) in SPDR
	return data;							// Return received byte
}
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	d8 2f       	mov	r29, r24
  fe:	c6 2f       	mov	r28, r22
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 b3 00 	call	0x166	; 0x166 <spi_slaveSelect>
 108:	8d 2f       	mov	r24, r29
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <spi_write>
 110:	8c 2f       	mov	r24, r28
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 d5 00 	call	0x1aa	; 0x1aa <spi_write>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 ca 00 	call	0x194	; 0x194 <spi_slaveDeSelect>
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

Disassembly of section .text.displayDriverInit:

00000126 <displayDriverInit>:
 126:	6f ef       	ldi	r22, 0xFF	; 255
 128:	89 e0       	ldi	r24, 0x09	; 9
 12a:	0e 94 7c 00 	call	0xf8	; 0xf8 <spi_writeWord>
 12e:	64 e0       	ldi	r22, 0x04	; 4
 130:	8a e0       	ldi	r24, 0x0A	; 10
 132:	0e 94 7c 00 	call	0xf8	; 0xf8 <spi_writeWord>
 136:	63 e0       	ldi	r22, 0x03	; 3
 138:	8b e0       	ldi	r24, 0x0B	; 11
 13a:	0e 94 7c 00 	call	0xf8	; 0xf8 <spi_writeWord>
 13e:	61 e0       	ldi	r22, 0x01	; 1
 140:	8c e0       	ldi	r24, 0x0C	; 12
 142:	0e 94 7c 00 	call	0xf8	; 0xf8 <spi_writeWord>
 146:	08 95       	ret

Disassembly of section .text.main:

000000a4 <main>:
  a4:	cf 93       	push	r28
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	87 bb       	out	0x17, r24	; 23
  aa:	0e 94 bf 00 	call	0x17e	; 0x17e <spi_masterInit>
  ae:	0e 94 93 00 	call	0x126	; 0x126 <displayDriverInit>
  b2:	c1 e0       	ldi	r28, 0x01	; 1
  b4:	05 c0       	rjmp	.+10     	; 0xc0 <main+0x1c>
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	8c 2f       	mov	r24, r28
  ba:	0e 94 7c 00 	call	0xf8	; 0xf8 <spi_writeWord>
  be:	cf 5f       	subi	r28, 0xFF	; 255
  c0:	c5 30       	cpi	r28, 0x05	; 5
  c2:	c8 f3       	brcs	.-14     	; 0xb6 <main+0x12>
  c4:	88 ee       	ldi	r24, 0xE8	; 232
  c6:	93 e0       	ldi	r25, 0x03	; 3
  c8:	0e 94 a4 00 	call	0x148	; 0x148 <wait>
  cc:	c1 e0       	ldi	r28, 0x01	; 1
  ce:	0a c0       	rjmp	.+20     	; 0xe4 <main+0x40>
  d0:	6c 2f       	mov	r22, r28
  d2:	85 e0       	ldi	r24, 0x05	; 5
  d4:	8c 1b       	sub	r24, r28
  d6:	0e 94 7c 00 	call	0xf8	; 0xf8 <spi_writeWord>
  da:	88 ee       	ldi	r24, 0xE8	; 232
  dc:	93 e0       	ldi	r25, 0x03	; 3
  de:	0e 94 a4 00 	call	0x148	; 0x148 <wait>
  e2:	cf 5f       	subi	r28, 0xFF	; 255
  e4:	c5 30       	cpi	r28, 0x05	; 5
  e6:	a0 f3       	brcs	.-24     	; 0xd0 <main+0x2c>
  e8:	88 ee       	ldi	r24, 0xE8	; 232
  ea:	93 e0       	ldi	r25, 0x03	; 3
  ec:	0e 94 a4 00 	call	0x148	; 0x148 <wait>
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret
