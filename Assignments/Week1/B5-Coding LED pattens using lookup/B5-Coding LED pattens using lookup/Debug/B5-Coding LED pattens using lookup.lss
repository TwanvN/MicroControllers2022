
B5-Coding LED pattens using lookup.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000021e  00000292  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  000002c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c13  00000000  00000000  000002f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000869  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ca  00000000  00000000  0000176d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  00001a38  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000d6  00000000  00000000  00001d09  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000184  00000184  000001f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  00000166  00000166  000001da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.setLamps 00000034  00000132  00000132  000001a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000046  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .data.instructions 00000096  00800100  00000188  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
   8:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
   c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  10:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  14:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  18:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  1c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  20:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  24:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  28:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  2c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  30:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  34:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  38:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  3c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  40:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  44:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  48:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  4c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  50:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  54:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  58:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  5c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  60:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  64:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  68:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  6c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  70:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  74:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  78:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  7c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  80:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  84:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
  88:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	00 01       	movw	r0, r0
  92:	88 00       	.word	0x0088	; ????

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	ec e8       	ldi	r30, 0x8C	; 140
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	19 c0       	rjmp	.+50     	; 0xda <__do_clear_bss+0x8>
  a8:	b7 91       	elpm	r27, Z+
  aa:	a7 91       	elpm	r26, Z+
  ac:	37 91       	elpm	r19, Z+
  ae:	27 91       	elpm	r18, Z+
  b0:	07 91       	elpm	r16, Z+
  b2:	07 fd       	sbrc	r16, 7
  b4:	0e c0       	rjmp	.+28     	; 0xd2 <__do_clear_bss>
  b6:	97 91       	elpm	r25, Z+
  b8:	87 91       	elpm	r24, Z+
  ba:	ef 01       	movw	r28, r30
  bc:	f9 2f       	mov	r31, r25
  be:	e8 2f       	mov	r30, r24
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	07 90       	elpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	a2 17       	cp	r26, r18
  c8:	b3 07       	cpc	r27, r19
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0x22>
  cc:	fe 01       	movw	r30, r28
  ce:	1b be       	out	0x3b, r1	; 59
  d0:	04 c0       	rjmp	.+8      	; 0xda <__do_clear_bss+0x8>

000000d2 <__do_clear_bss>:
  d2:	1d 92       	st	X+, r1
  d4:	a2 17       	cp	r26, r18
  d6:	b3 07       	cpc	r27, r19
  d8:	e1 f7       	brne	.-8      	; 0xd2 <__do_clear_bss>
  da:	e3 39       	cpi	r30, 0x93	; 147
  dc:	f4 07       	cpc	r31, r20
  de:	21 f7       	brne	.-56     	; 0xa8 <__do_copy_data+0x8>
  e0:	0e 94 76 00 	call	0xec	; 0xec <_etext>
  e4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>

Disassembly of section .text:

00000184 <__bad_interrupt>:
 184:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.wait:

00000166 <wait>:
#include <avr/io.h>
#include <util/delay.h>

void wait( int ms )
{
	for (int i=0; i<ms; i++) {
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	08 c0       	rjmp	.+16     	; 0x17c <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	ef ec       	ldi	r30, 0xCF	; 207
 16e:	f7 e0       	ldi	r31, 0x07	; 7
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <wait+0xa>
 174:	00 c0       	rjmp	.+0      	; 0x176 <wait+0x10>
 176:	00 00       	nop
 178:	2f 5f       	subi	r18, 0xFF	; 255
 17a:	3f 4f       	sbci	r19, 0xFF	; 255
 17c:	28 17       	cp	r18, r24
 17e:	39 07       	cpc	r19, r25
 180:	ac f3       	brlt	.-22     	; 0x16c <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 182:	08 95       	ret

Disassembly of section .text.setLamps:

00000132 <setLamps>:
    }
	
	return 1;
}

void setLamps(PATTERN_INSTRUCTION instruction) {
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	00 d0       	rcall	.+0      	; 0x138 <setLamps+0x6>
 138:	00 d0       	rcall	.+0      	; 0x13a <setLamps+0x8>
 13a:	00 d0       	rcall	.+0      	; 0x13c <setLamps+0xa>
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
 140:	5a 83       	std	Y+2, r21	; 0x02
 142:	6b 83       	std	Y+3, r22	; 0x03
 144:	7c 83       	std	Y+4, r23	; 0x04
	PORTA = instruction.value[0];
 146:	4b bb       	out	0x1b, r20	; 27
	PORTB = instruction.value[1];
 148:	8a 81       	ldd	r24, Y+2	; 0x02
 14a:	88 bb       	out	0x18, r24	; 24
	PORTC = instruction.value[2];
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	85 bb       	out	0x15, r24	; 21
	PORTD = instruction.value[3];
 150:	8c 81       	ldd	r24, Y+4	; 0x04
 152:	82 bb       	out	0x12, r24	; 18
 154:	26 96       	adiw	r28, 0x06	; 6
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

Disassembly of section .text.main:

000000ec <main>:
void setLamps(PATTERN_INSTRUCTION instruction);

int main(void)
{
	// Initializing all rows to output 0x11111111
	DDRA = 0xFF; DDRB = 0xFF; DDRC = 0xFF; DDRD = 0xFF;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	8a bb       	out	0x1a, r24	; 26
  f0:	87 bb       	out	0x17, r24	; 23
  f2:	84 bb       	out	0x14, r24	; 20
  f4:	81 bb       	out	0x11, r24	; 17
	
    while(1)
    {
		for (int i = 0; i < INSTRUCTION_SIZE; i++)
  f6:	00 e0       	ldi	r16, 0x00	; 0
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	17 c0       	rjmp	.+46     	; 0x12a <main+0x3e>
		{
			setLamps(instructions[i]);
  fc:	e8 01       	movw	r28, r16
  fe:	cc 0f       	add	r28, r28
 100:	dd 1f       	adc	r29, r29
 102:	c0 0f       	add	r28, r16
 104:	d1 1f       	adc	r29, r17
 106:	cc 0f       	add	r28, r28
 108:	dd 1f       	adc	r29, r29
 10a:	c0 50       	subi	r28, 0x00	; 0
 10c:	df 4f       	sbci	r29, 0xFF	; 255
 10e:	48 81       	ld	r20, Y
 110:	59 81       	ldd	r21, Y+1	; 0x01
 112:	6a 81       	ldd	r22, Y+2	; 0x02
 114:	7b 81       	ldd	r23, Y+3	; 0x03
 116:	8c 81       	ldd	r24, Y+4	; 0x04
 118:	9d 81       	ldd	r25, Y+5	; 0x05
 11a:	0e 94 99 00 	call	0x132	; 0x132 <setLamps>
			wait(instructions[i].delay);
 11e:	8c 81       	ldd	r24, Y+4	; 0x04
 120:	9d 81       	ldd	r25, Y+5	; 0x05
 122:	0e 94 b3 00 	call	0x166	; 0x166 <wait>
	// Initializing all rows to output 0x11111111
	DDRA = 0xFF; DDRB = 0xFF; DDRC = 0xFF; DDRD = 0xFF;
	
    while(1)
    {
		for (int i = 0; i < INSTRUCTION_SIZE; i++)
 126:	0f 5f       	subi	r16, 0xFF	; 255
 128:	1f 4f       	sbci	r17, 0xFF	; 255
 12a:	09 31       	cpi	r16, 0x19	; 25
 12c:	11 05       	cpc	r17, r1
 12e:	34 f3       	brlt	.-52     	; 0xfc <main+0x10>
 130:	e2 cf       	rjmp	.-60     	; 0xf6 <main+0xa>
